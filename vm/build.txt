C2DCLI_SOLUTION=
C2D_REAL_SCRIPT=/usr/local/google/home/manikowski/.c2d/c2d
C2D_GCP_BUCKET=ccm-ops-test-adhoc-imagebuilder
C2D_USER_FOLDER=/usr/local/google/home/manikowski/.c2d
C2D_STATIC_IP=35.192.21.166
C2D_GCP_KEY_PATH=/usr/local/google/home/manikowski/dev/keys/sa.json
C2D_BUILDER_IMAGE=gcr.io/cloud-marketplace-tools/vm/imagebuilder:0.1.9
C2D_WORKING_ENV=local
C2DCLI_DIR=/usr/local/google/home/manikowski/.c2d
C2D_VM_PARTNER=click-to-deploy-images
C2D_EDITOR=code
C2D_GCP_PROJECT=ccm-ops-test-adhoc
C2D_CLI_SOLUTION=rubystack
C2D_CLI_DIR=/usr/local/google/home/manikowski/.c2d
C2D_USER_CONFIG=/usr/local/google/home/manikowski/.c2d/config.json
C2D_WORKING_DIR=/usr/local/google/home/manikowski/dev/click-to-deploy/vm
Created [imagebuilder14487].
To use this configuration, activate it by running:
  $ gcloud config configurations activate imagebuilder14487


Updated property [core/project].
Activated service account credentials for: [manikowski-sa@ccm-ops-test-adhoc.iam.gserviceaccount.com]
HOSTNAME=b8b0721bd226
KEY_FILE_PATH=/service-account.json
BUCKET=ccm-ops-test-adhoc-imagebuilder
SOLUTION_NAME=rubystack
PACKER_SHA256=0587f7815ed79589cd9c2b754c82115731c8d0b8fd3b746fe40055d969facba5
PWD=/
PORT=8080
HOME=/root
CHEF_DIR=/chef
SHLVL=1
TESTS_DIR=/tests
CLOUDSDK_ACTIVE_CONFIG_NAME=imagebuilder14487
RUN_TESTS=false
PACKER_BINARY=/bin/packer
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
PROJECT=ccm-ops-test-adhoc
DEBIAN_FRONTEND=noninteractive
PACKER_VERSION=1.8.3
PACKER_DIR=/packer/templates
_=/usr/bin/env
Google Cloud SDK [405.0.0]

Platform: [Linux, x86_64] uname_result(system='Linux', node='b8b0721bd226', release='5.18.16-1rodete4-amd64', version='#1 SMP PREEMPT_DYNAMIC Debian 5.18.16-1rodete4 (2022-10-21)', machine='x86_64')
Locale: ('en_US', 'UTF-8')
Python Version: [3.9.12 (main, Apr 30 2022, 03:04:12)  [Clang 12.0.1 ]]
Python Location: [/usr/bin/../lib/google-cloud-sdk/platform/bundledpythonunix/bin/python3]
OpenSSL: [OpenSSL 1.1.1l  24 Aug 2021]
Requests Version: [2.25.1]
urllib3 Version: [1.26.9]
Site Packages: [Enabled]

Installation Root: [/usr/lib/google-cloud-sdk]
Installed Components:
  beta: [2022.09.30]
  gcloud-crc32c: [1.0.0]
  bq: [2.0.78]
  bundled-python3-unix: [3.9.12]
  alpha: [2022.09.30]
  gsutil: [5.14]
  core: [2022.09.30]
System PATH: [/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin]
Python PATH: [/usr/bin/../lib/google-cloud-sdk/lib/third_party:/usr/lib/google-cloud-sdk/lib:/usr/lib/google-cloud-sdk/platform/bundledpythonunix/lib/python39.zip:/usr/lib/google-cloud-sdk/platform/bundledpythonunix/lib/python3.9:/usr/lib/google-cloud-sdk/platform/bundledpythonunix/lib/python3.9/lib-dynload:/usr/lib/google-cloud-sdk/platform/bundledpythonunix/lib/python3.9/site-packages:/usr/lib/google-cloud-sdk/platform/bundledpythonunix/lib/python3.9/site-packages/setuptools-57.4.0-py3.9.egg:/usr/lib/google-cloud-sdk/platform/bundledpythonunix/lib/python3.9/site-packages/pip-21.1.3-py3.9.egg]
Cloud SDK on PATH: [False]
Kubectl on PATH: [False]

Installation Properties: [/usr/lib/google-cloud-sdk/properties]
User Config Directory: [/root/.config/gcloud]
Active Configuration Name: [imagebuilder14487]
Active Configuration Path: [/root/.config/gcloud/configurations/config_imagebuilder14487]

Account: [manikowski-sa@ccm-ops-test-adhoc.iam.gserviceaccount.com]
Project: [ccm-ops-test-adhoc]

Current Properties:
  [core]
    account: [manikowski-sa@ccm-ops-test-adhoc.iam.gserviceaccount.com] (property file)
    disable_usage_reporting: [True] (property file)
    project: [ccm-ops-test-adhoc] (property file)

Logs Directory: [/root/.config/gcloud/logs]
Last Log File: [/root/.config/gcloud/logs/2022.12.14/14.05.12.489402.log]

git: [NOT AVAILABLE]
ssh: [OpenSSH_8.4p1 Debian-5+deb11u1, OpenSSL 1.1.1n  15 Mar 2022]


>>> Starting image build for rubystack
>>> Using image name: rubystack-v1671026713812
Packer: 1.8.3
/bin/packer build -color=false -var chefdir=/chef -var keyfile=/service-account.json -var project=ccm-ops-test-adhoc -var zone=us-central1-f -var imagename=rubystack-v1671026713812-pre -var use_internal_ip=false -var log_bucket=ccm-ops-test-adhoc-imagebuilder/logs -var ssh_username=packer /tmp/template.json
==> googlecompute: Checking image does not exist...
==> googlecompute: Creating temporary RSA SSH key for instance...
==> googlecompute: Using image: debian-10-buster-v20221206
==> googlecompute: Creating instance...
    googlecompute: Loading zone: us-central1-f
    googlecompute: Loading machine type: e2-standard-2
    googlecompute: Requesting instance creation...
    googlecompute: Waiting for creation operation to complete...
    googlecompute: Instance has been created!
==> googlecompute: Waiting for the instance to become running...
    googlecompute: IP: 34.67.57.46
==> googlecompute: Using SSH communicator to connect: 34.67.57.46
==> googlecompute: Waiting for SSH to become available...
==> googlecompute: Connected to SSH!
==> googlecompute: Provisioning with chef-solo
    googlecompute: Installing Chef...
==> googlecompute:   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
==> googlecompute:                                  Dload  Upload   Total   Spent    Left  Speed
==> googlecompute: 100 25.3M  100 25.3M    0     0   109M      0 --:--:-- --:--:-- --:--:--  109M
    googlecompute: chef-solo.deb: OK
    googlecompute: Selecting previously unselected package chef.
    googlecompute: (Reading database ... 54268 files and directories currently installed.)
    googlecompute: Preparing to unpack chef-solo.deb ...
    googlecompute: Unpacking chef (17.6.18-1) ...
    googlecompute: Setting up chef (17.6.18-1) ...
    googlecompute: Thank you for installing Chef Infra Client! For help getting started visit https://learn.chef.io
    googlecompute: Creating directory: /tmp/packer-chef-solo
    googlecompute: Creating directory: /tmp/packer-chef-solo/cookbooks-0
    googlecompute: Creating configuration file 'solo.rb'
    googlecompute: Creating JSON attribute file
    googlecompute: Executing Chef: sudo chef-solo --no-color -c /tmp/packer-chef-solo/solo.rb -j /tmp/packer-chef-solo/node.json
    googlecompute: +---------------------------------------------+
    googlecompute: âœ” 2 product licenses accepted.
    googlecompute: +---------------------------------------------+
    googlecompute: Chef Infra Client, version 17.6.18
    googlecompute: Patents: https://www.chef.io/patents
    googlecompute: Infra Phase starting
    googlecompute: Resolving cookbooks for run list: ["c2d-config", "ruby::standalone", "stackdriver"]
    googlecompute: Synchronizing cookbooks:
    googlecompute:   - c2d-config (0.0.0)
    googlecompute:   - ruby (0.0.0)
    googlecompute:   - stackdriver (0.0.0)
    googlecompute:   - git (0.0.0)
    googlecompute:   - mysql (0.0.0)
    googlecompute:   - apache2 (0.0.0)
    googlecompute: Installing cookbook gem dependencies:
    googlecompute: Compiling cookbooks...
    googlecompute: Loading Chef InSpec profile files:
    googlecompute: Loading Chef InSpec input files:
    googlecompute: Loading Chef InSpec waiver files:
    googlecompute: Converging 38 resources
    googlecompute: Recipe: c2d-config::packages-wishes
    googlecompute:   * apt_update[update] action update
    googlecompute:     * directory[/var/lib/apt/periodic] action create (up to date)
    googlecompute:     * directory[/etc/apt/apt.conf.d] action create (up to date)
    googlecompute:     * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing
    googlecompute:       - create new file /etc/apt/apt.conf.d/15update-stamp
    googlecompute:       - update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb
    googlecompute:       --- /etc/apt/apt.conf.d/15update-stamp	2022-12-14 14:06:06.327725509 +0000
    googlecompute:       +++ /etc/apt/apt.conf.d/.chef-15update-stamp20221214-663-uh71dz	2022-12-14 14:06:06.327725509 +0000
    googlecompute:       @@ -1 +1,2 @@
    googlecompute:       +APT::Update::Post-Invoke-Success {"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true";};
    googlecompute:     * execute[apt-get -q update] action run
    googlecompute:       - execute ["apt-get", "-q", "update"]
    googlecompute:     - force update new lists of packages
    googlecompute:   * apt_package[install_packages] action install
    googlecompute:     - install version 1.8.2.3 of package apt-transport-https
    googlecompute:     - install version 1.5+dfsg-2+b1 of package jq
    googlecompute:     - install version 1:9.11.5.P4+dfsg-5.1+deb10u8 of package host
    googlecompute:     - install version 4.20.0-1 of package xfsprogs
    googlecompute: Recipe: c2d-config::default
    googlecompute:   * directory[/opt/c2d] action create
    googlecompute:     - create new directory /opt/c2d
    googlecompute:     - change mode from '' to '0755'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * directory[/opt/c2d/scripts] action create
    googlecompute:     - create new directory /opt/c2d/scripts
    googlecompute:     - change mode from '' to '0755'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * directory[/opt/c2d/etc] action create
    googlecompute:     - create new directory /opt/c2d/etc
    googlecompute:     - change mode from '' to '0755'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * cookbook_file[/opt/c2d/c2d-startup] action create
    googlecompute:     - create new file /opt/c2d/c2d-startup
    googlecompute:     - update content in file /opt/c2d/c2d-startup from none to 993caa
    googlecompute:     --- /opt/c2d/c2d-startup	2022-12-14 14:06:20.403725509 +0000
    googlecompute:     +++ /opt/c2d/.chef-c2d-startup20221214-663-3ev5wg	2022-12-14 14:06:20.403725509 +0000
    googlecompute:     @@ -1 +1,76 @@
    googlecompute:     +#!/bin/bash
    googlecompute:     +#
    googlecompute:     +# Copyright 2017 Google Inc.
    googlecompute:     +#
    googlecompute:     +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:     +# you may not use this file except in compliance with the License.
    googlecompute:     +# You may obtain a copy of the License at
    googlecompute:     +#
    googlecompute:     +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:     +#
    googlecompute:     +# Unless required by applicable law or agreed to in writing, software
    googlecompute:     +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:     +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:     +# See the License for the specific language governing permissions and
    googlecompute:     +# limitations under the License.
    googlecompute:     +
    googlecompute:     +source /opt/c2d/c2d-utils || exit 1
    googlecompute:     +
    googlecompute:     +# If 'google-c2d-startup-enable' metadata property is set to '0' then,
    googlecompute:     +# the startup scripts are not be executed.
    googlecompute:     +# The default value is '1', so the startup scripts are executed if property is not defined.
    googlecompute:     +GOOGLE_C2D_STARTUP_ENABLE="$(get_attribute_value "google-c2d-startup-enable")"
    googlecompute:     +GOOGLE_C2D_STARTUP_ENABLE="${GOOGLE_C2D_STARTUP_ENABLE:-1}"
    googlecompute:     +
    googlecompute:     +readonly GOOGLE_VM_CONFIG_LOCK_FILE="/var/lock/google_vm_config.lock"
    googlecompute:     +
    googlecompute:     +declare -i SUCCESS_CNT=0
    googlecompute:     +declare -i FAILURE_CNT=0
    googlecompute:     +
    googlecompute:     +if [[ -f "${GOOGLE_VM_CONFIG_LOCK_FILE}" ]]; then
    googlecompute:     +  echo "Google C2D startup config has already run."
    googlecompute:     +  echo "To run again, delete ${GOOGLE_VM_CONFIG_LOCK_FILE}"
    googlecompute:     +  exit 1
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +if [[ "${GOOGLE_C2D_STARTUP_ENABLE}" != 1 ]]; then
    googlecompute:     +  echo "Google C2D startup config is disabled."
    googlecompute:     +  exit 1
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +# Run scripts in /opt/c2d/scripts and record successes/failures.
    googlecompute:     +shopt -s nullglob
    googlecompute:     +for script in /opt/c2d/scripts/*; do
    googlecompute:     +  if [[ -x "${script}" ]]; then
    googlecompute:     +    echo "--> Running: ${script}"
    googlecompute:     +
    googlecompute:     +    # Execute startup script.
    googlecompute:     +    "${script}"
    googlecompute:     +    declare -i exit_code=$?
    googlecompute:     +
    googlecompute:     +    if [[ ${exit_code} -eq 0 ]]; then
    googlecompute:     +      (( SUCCESS_CNT+=1 ))
    googlecompute:     +      echo "--> ${script}, exit_code=${exit_code}/SUCCESS"
    googlecompute:     +    else
    googlecompute:     +      (( FAILURE_CNT+=1 ))
    googlecompute:     +      echo "--> ${script}, exit_code=${exit_code}/FAILURE"
    googlecompute:     +    fi
    googlecompute:     +  fi
    googlecompute:     +done
    googlecompute:     +
    googlecompute:     +if has_external_ip; then
    googlecompute:     +  # Send status via runtime config.
    googlecompute:     +  if (( ${FAILURE_CNT} > 0 )); then
    googlecompute:     +    /opt/c2d/runtime-config-post-result "failure"
    googlecompute:     +  else
    googlecompute:     +    /opt/c2d/runtime-config-post-result "success"
    googlecompute:     +  fi
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +# Write lock file
    googlecompute:     +touch "${GOOGLE_VM_CONFIG_LOCK_FILE}"
    googlecompute:     +systemctl disable google-c2d-startup.service
    googlecompute:     +
    googlecompute:     +echo "Google C2D startup config results: SUCCESSES=${SUCCESS_CNT} FAILURES=${FAILURE_CNT}"
    googlecompute:     +exit ${FAILURE_CNT}
    googlecompute:     - change mode from '' to '0755'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * cookbook_file[/opt/c2d/runtime-config-post-result] action create
    googlecompute:     - create new file /opt/c2d/runtime-config-post-result
    googlecompute:     - update content in file /opt/c2d/runtime-config-post-result from none to 5c397f
    googlecompute:     --- /opt/c2d/runtime-config-post-result	2022-12-14 14:06:20.415725509 +0000
    googlecompute:     +++ /opt/c2d/.chef-runtime-config-post-result20221214-663-tek3kw	2022-12-14 14:06:20.415725509 +0000
    googlecompute:     @@ -1 +1,44 @@
    googlecompute:     +#!/bin/bash
    googlecompute:     +#
    googlecompute:     +# Copyright 2017 Google Inc.
    googlecompute:     +#
    googlecompute:     +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:     +# you may not use this file except in compliance with the License.
    googlecompute:     +# You may obtain a copy of the License at
    googlecompute:     +#
    googlecompute:     +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:     +#
    googlecompute:     +# Unless required by applicable law or agreed to in writing, software
    googlecompute:     +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:     +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:     +# See the License for the specific language governing permissions and
    googlecompute:     +# limitations under the License.
    googlecompute:     +
    googlecompute:     +source /opt/c2d/c2d-utils || exit 1
    googlecompute:     +
    googlecompute:     +case "$1" in
    googlecompute:     +        success|failure)
    googlecompute:     +                readonly ACTION="$1"
    googlecompute:     +        ;;
    googlecompute:     +        *)
    googlecompute:     +                echo "Requires an argument of value [success|failure]"
    googlecompute:     +                exit 1
    googlecompute:     +        ;;
    googlecompute:     +esac
    googlecompute:     +
    googlecompute:     +readonly ACCESS_TOKEN="$(get_metadata_value "instance/service-accounts/default/token" | awk -F\" '{ print $4 }')"
    googlecompute:     +readonly INSTANCE_NAME="$(get_metadata_value "instance/name")"
    googlecompute:     +readonly RUNTIME_CONFIG_URL="$(get_attribute_value "status-config-url")"
    googlecompute:     +readonly RUNTIME_CONFIG_PATH="$(echo "${RUNTIME_CONFIG_URL}" | sed 's|https\?://[^/]\+/v1\(beta1\)\?/||')"
    googlecompute:     +readonly VARIABLE_PATH="$(get_attribute_value "status-variable-path")"
    googlecompute:     +
    googlecompute:     +readonly ACTIONBASE64="$(echo -n "${ACTION}" | base64)"
    googlecompute:     +readonly PAYLOAD="$(printf '{"name": "%s", "value": "%s"}' "${RUNTIME_CONFIG_PATH}/variables/${VARIABLE_PATH}/${ACTION}/${INSTANCE_NAME}" "${ACTIONBASE64}")"
    googlecompute:     +echo "Posting software startup ${ACTION} status"
    googlecompute:     +curl -s \
    googlecompute:     +  -X POST \
    googlecompute:     +  -d "${PAYLOAD}" \
    googlecompute:     +  -H "Authorization: Bearer ${ACCESS_TOKEN}" \
    googlecompute:     +  -H "Content-Type: application/json" \
    googlecompute:     +  "${RUNTIME_CONFIG_URL}/variables"
    googlecompute:     - change mode from '' to '0755'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * cookbook_file[/opt/c2d/c2d-utils] action create
    googlecompute:     - create new file /opt/c2d/c2d-utils
    googlecompute:     - update content in file /opt/c2d/c2d-utils from none to 86e725
    googlecompute:     --- /opt/c2d/c2d-utils	2022-12-14 14:06:20.423725509 +0000
    googlecompute:     +++ /opt/c2d/.chef-c2d-utils20221214-663-cf1rss	2022-12-14 14:06:20.423725509 +0000
    googlecompute:     @@ -1 +1,275 @@
    googlecompute:     +#!/bin/bash
    googlecompute:     +#
    googlecompute:     +# Copyright 2017 Google Inc.
    googlecompute:     +#
    googlecompute:     +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:     +# you may not use this file except in compliance with the License.
    googlecompute:     +# You may obtain a copy of the License at
    googlecompute:     +#
    googlecompute:     +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:     +#
    googlecompute:     +# Unless required by applicable law or agreed to in writing, software
    googlecompute:     +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:     +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:     +# See the License for the specific language governing permissions and
    googlecompute:     +# limitations under the License.
    googlecompute:     +
    googlecompute:     +# Common utils
    googlecompute:     +
    googlecompute:     +function get_current_time_in_sec() {
    googlecompute:     +  date +%s
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# Metadata operations
    googlecompute:     +
    googlecompute:     +function get_metadata_value() {
    googlecompute:     +  curl --retry 5 \
    googlecompute:     +    -s \
    googlecompute:     +    -f \
    googlecompute:     +    -H "Metadata-Flavor: Google" \
    googlecompute:     +    "http://metadata/computeMetadata/v1/$1"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_attribute_value() {
    googlecompute:     +  get_metadata_value "instance/attributes/$1"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_hostname() {
    googlecompute:     +  get_metadata_value "instance/hostname"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_project_id() {
    googlecompute:     +  get_metadata_value "project/project-id"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_access_token() {
    googlecompute:     +  get_metadata_value "instance/service-accounts/default/token" \
    googlecompute:     +    | awk -F\" '{ print $4 }'
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# IP operations
    googlecompute:     +
    googlecompute:     +function get_internal_ip() {
    googlecompute:     +  get_metadata_value "instance/network-interfaces/0/ip"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_external_ip() {
    googlecompute:     +  get_metadata_value "instance/network-interfaces/0/access-configs/0/external-ip"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function has_external_ip() {
    googlecompute:     +  if [[ -z "$(get_external_ip)" ]]; then
    googlecompute:     +    false
    googlecompute:     +  else
    googlecompute:     +    true
    googlecompute:     +  fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# Disk operations
    googlecompute:     +
    googlecompute:     +function format_and_mount_disk() {
    googlecompute:     +  local -r disk_name="$1"
    googlecompute:     +  local -r mount_dir="$2"
    googlecompute:     +  local -r filesystem="${3:-ext4}"
    googlecompute:     +
    googlecompute:     +  # Validate the filesystem variable.
    googlecompute:     +  # Currently supported: ext4 and xfs.
    googlecompute:     +  if [[ ! ("${filesystem}" == "ext4" || "${filesystem}" == "xfs") ]]; then
    googlecompute:     +    echo "Error: unexpected filesystem: ${filesystem}. Expected ext4 or xfs."
    googlecompute:     +    exit 1
    googlecompute:     +  fi
    googlecompute:     +
    googlecompute:     +  # Translate the disk's name to filesystem path.
    googlecompute:     +  local -r disk_path="/dev/disk/by-id/google-${disk_name}"
    googlecompute:     +
    googlecompute:     +  # Create mount directory.
    googlecompute:     +  mkdir -p "${mount_dir}"
    googlecompute:     +  chmod 0755 "${mount_dir}"
    googlecompute:     +
    googlecompute:     +  case "${filesystem}" in
    googlecompute:     +    ext4)
    googlecompute:     +      echo "Format disk: mkfs.ext4 '${disk_path}'"
    googlecompute:     +      mkfs.ext4 "${disk_path}"
    googlecompute:     +    ;;
    googlecompute:     +    xfs)
    googlecompute:     +      # Formatting the disk with mkfs.xfs requires
    googlecompute:     +      # the xfsprogs package to be installed.
    googlecompute:     +      echo "Format disk: mkfs.xfs '${disk_path}'"
    googlecompute:     +      mkfs.xfs "${disk_path}"
    googlecompute:     +    ;;
    googlecompute:     +  esac
    googlecompute:     +
    googlecompute:     +  # Try to mount disk after formatted it.
    googlecompute:     +  echo "Mount disk '${disk_name}'"
    googlecompute:     +  mount -o discard,defaults -t "${filesystem}" "${disk_path}" "${mount_dir}"
    googlecompute:     +
    googlecompute:     +  # Add an entry to /etc/fstab to mount the disk on restart.
    googlecompute:     +  echo "${disk_path} ${mount_dir} ${filesystem} discard,defaults 0 2" \
    googlecompute:     +    >> /etc/fstab
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# Runtime config variable operations
    googlecompute:     +
    googlecompute:     +function read_rtc_var() {
    googlecompute:     +  local -r project_id="$(get_project_id)"
    googlecompute:     +  local -r access_token="$(get_access_token)"
    googlecompute:     +
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r var_name="$2"
    googlecompute:     +
    googlecompute:     +  curl -s -k -X GET \
    googlecompute:     +    -H "Authorization: Bearer ${access_token}" \
    googlecompute:     +    -H "Content-Type: application/json" \
    googlecompute:     +    -H "X-GFE-SSL: yes" \
    googlecompute:     +    "https://runtimeconfig.googleapis.com/v1beta1/projects/${project_id}/configs/${rtc_name}/variables/${var_name}"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function check_rtc_var_presence() {
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r var_name="$2"
    googlecompute:     +  read_rtc_var "${rtc_name}" "${var_name}" | grep -c updateTime
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_rtc_var_text() {
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r var_name="$2"
    googlecompute:     +  read_rtc_var "${rtc_name}" "${var_name}" | jq -r '.text'
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function set_rtc_var_text() {
    googlecompute:     +  local -r project_id="$(get_project_id)"
    googlecompute:     +  local -r access_token="$(get_access_token)"
    googlecompute:     +
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r var_name="$2"
    googlecompute:     +  local -r var_text="$3"
    googlecompute:     +
    googlecompute:     +  local -r payload="$(printf '{"name": "%s", "text": "%s"}' \
    googlecompute:     +    "projects/${project_id}/configs/${rtc_name}/variables/${var_name}" \
    googlecompute:     +    "${var_text}")"
    googlecompute:     +
    googlecompute:     +  curl -s -k -X POST \
    googlecompute:     +    -d "${payload}" \
    googlecompute:     +    -H "Authorization: Bearer ${access_token}" \
    googlecompute:     +    -H "Content-Type: application/json" \
    googlecompute:     +    -H "X-GFE-SSL: yes" \
    googlecompute:     +    "https://runtimeconfig.googleapis.com/v1beta1/projects/${project_id}/configs/${rtc_name}/variables"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function wait_for_rtc_var() {
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r var_name="$2"
    googlecompute:     +  local -r timeout_sec="${3:-180}"
    googlecompute:     +
    googlecompute:     +  local -r timeout_time_sec=$(($(get_current_time_in_sec) + "${timeout_sec}"))
    googlecompute:     +
    googlecompute:     +  echo "Waiting for variable '${var_name}' with timeout of ${timeout_sec}s..."
    googlecompute:     +
    googlecompute:     +  local ip_presence="$(check_rtc_var_presence "${rtc_name}" "${var_name}")"
    googlecompute:     +  while [[ "${ip_presence}" == "0" ]] \
    googlecompute:     +        && [[ $(get_current_time_in_sec) -lt ${timeout_time_sec} ]]; do
    googlecompute:     +    echo "Variable '${var_name}' not set yet - sleeping 3s..."
    googlecompute:     +    sleep 3
    googlecompute:     +    local ip_presence="$(check_rtc_var_presence "${rtc_name}" "${var_name}")"
    googlecompute:     +  done
    googlecompute:     +
    googlecompute:     +  if [[ "${ip_presence}" == "0" ]]; then
    googlecompute:     +    echo "FAIL: Wait for variable '${var_name}' timed out without success after ${timeout_sec}s"
    googlecompute:     +    return 1
    googlecompute:     +  else
    googlecompute:     +    echo "SUCCESS variable '${var_name}' is now set and available to be read."
    googlecompute:     +    return 0
    googlecompute:     +  fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# Runtime config waiter operations
    googlecompute:     +
    googlecompute:     +function read_rtc_waiter() {
    googlecompute:     +  local -r project_id="$(get_project_id)"
    googlecompute:     +  local -r access_token="$(get_access_token)"
    googlecompute:     +
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r waiter_name="$2"
    googlecompute:     +
    googlecompute:     +  curl -s -k -X GET \
    googlecompute:     +    -H "Authorization: Bearer ${access_token}" \
    googlecompute:     +    -H "Content-Type: application/json" \
    googlecompute:     +    -H "X-GFE-SSL: yes" \
    googlecompute:     +    "https://runtimeconfig.googleapis.com/v1beta1/projects/${project_id}/configs/${rtc_name}/waiters/${waiter_name}"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function get_rtc_waiter_status() {
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r waiter_name="$2"
    googlecompute:     +  local -r response="$(read_rtc_waiter "${rtc_name}" "${waiter_name}")"
    googlecompute:     +
    googlecompute:     +  if [[ "$(echo "${response}" | grep -c "\"done\": true")" -eq 1 ]]; then
    googlecompute:     +    if [[ "$(echo "${response}" | grep -c "\"error\":")" -eq 1 ]]; then
    googlecompute:     +      echo "FAILED"
    googlecompute:     +    else
    googlecompute:     +      echo "SUCCESS"
    googlecompute:     +    fi
    googlecompute:     +  else
    googlecompute:     +    echo "UNKNOWN"
    googlecompute:     +  fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# TODO(b/73926582)
    googlecompute:     +function wait_for_rtc_waiter_success() {
    googlecompute:     +  local -r rtc_name="$1"
    googlecompute:     +  local -r waiter_name="$2"
    googlecompute:     +  local -r timeout_sec="${3:-600}"
    googlecompute:     +
    googlecompute:     +  local -r timeout_time_sec=$(($(get_current_time_in_sec) + "${timeout_sec}"))
    googlecompute:     +
    googlecompute:     +  echo "Waiting for waiter '${waiter_name}' with timeout of ${timeout_sec}s..."
    googlecompute:     +
    googlecompute:     +  local status="$(get_rtc_waiter_status "${rtc_name}" "${waiter_name}")"
    googlecompute:     +  while [[ "${status}" != "SUCCESS" ]] \
    googlecompute:     +        && [[ $(get_current_time_in_sec) -lt ${timeout_time_sec} ]]; do
    googlecompute:     +    if [[ "${status}" == "FAIL" ]]; then
    googlecompute:     +      echo "Waiter '${waiter_name}' failed"
    googlecompute:     +      return 1
    googlecompute:     +    else
    googlecompute:     +      echo "Waiter '${waiter_name}' not finished yet - sleeping 3s..."
    googlecompute:     +      sleep 3
    googlecompute:     +      local status="$(get_rtc_waiter_status "${rtc_name}" "${waiter_name}")"
    googlecompute:     +    fi
    googlecompute:     +  done
    googlecompute:     +  echo "Waiter '${waiter_name}' succeeded"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# HTTP operations
    googlecompute:     +
    googlecompute:     +function read_http_status_code() {
    googlecompute:     +  local -r request_url="$1"
    googlecompute:     +  curl -s -L -o /dev/null -I -w "%{http_code}" "${request_url}"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +function wait_for_http_success() {
    googlecompute:     +  local -r success_code=200
    googlecompute:     +
    googlecompute:     +  local -r request_url="$1"
    googlecompute:     +  local -r timeout_sec="${2:-180}"
    googlecompute:     +
    googlecompute:     +  local timeout_time_sec=$(($(get_current_time_in_sec) + "${timeout_sec}"))
    googlecompute:     +
    googlecompute:     +  echo "Waiting for HTTP ${success_code} for ${request_url} with timeout of ${timeout_sec}s..."
    googlecompute:     +
    googlecompute:     +  local http_status="$(read_http_status_code "${request_url}")"
    googlecompute:     +  while [[ "${http_status}" != "${success_code}" ]] \
    googlecompute:     +        && [[ $(get_current_time_in_sec) -lt ${timeout_time_sec} ]]; do
    googlecompute:     +    echo "HTTP ${http_status}: Did not receive success code yet - sleeping 3s..."
    googlecompute:     +    sleep 3
    googlecompute:     +    local http_status="$(read_http_status_code "${request_url}")"
    googlecompute:     +  done
    googlecompute:     +
    googlecompute:     +  if [[ "${http_status}" != "${success_code}" ]]; then
    googlecompute:     +    echo "FAIL: timed out after ${timeout_sec}s with HTTP status: ${http_status}"
    googlecompute:     +    return 1
    googlecompute:     +  else
    googlecompute:     +    echo "SUCCESS: ${request_url} is now responding with HTTP ${success_code}."
    googlecompute:     +    return 0
    googlecompute:     +  fi
    googlecompute:     +}
    googlecompute:     - change mode from '' to '0644'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * c2d_startup_script[manage-swap] action cookbook_file
    googlecompute:     * cookbook_file[/opt/c2d/scripts/00-manage-swap] action create
    googlecompute:       - create new file /opt/c2d/scripts/00-manage-swap
    googlecompute:       - update content in file /opt/c2d/scripts/00-manage-swap from none to e76e58
    googlecompute:       --- /opt/c2d/scripts/00-manage-swap	2022-12-14 14:06:20.451725509 +0000
    googlecompute:       +++ /opt/c2d/scripts/.chef-00-manage-swap20221214-663-879v35	2022-12-14 14:06:20.451725509 +0000
    googlecompute:       @@ -1 +1,61 @@
    googlecompute:       +#!/bin/bash -eu
    googlecompute:       +#
    googlecompute:       +# Copyright 2018 Google Inc.
    googlecompute:       +#
    googlecompute:       +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:       +# you may not use this file except in compliance with the License.
    googlecompute:       +# You may obtain a copy of the License at
    googlecompute:       +#
    googlecompute:       +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:       +#
    googlecompute:       +# Unless required by applicable law or agreed to in writing, software
    googlecompute:       +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:       +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:       +# See the License for the specific language governing permissions and
    googlecompute:       +# limitations under the License.
    googlecompute:       +#
    googlecompute:       +# Script enables swap on VMs with less then 1GB RAM ($memsmall).
    googlecompute:       +
    googlecompute:       +swapfile="/.c2d-swap-file"
    googlecompute:       +swapsize=524288 # 512MB
    googlecompute:       +
    googlecompute:       +memsmall=1048576 # 1024MB
    googlecompute:       +spacelimit=$(($swapsize*3))
    googlecompute:       +
    googlecompute:       +memavail=$(free | awk '/^Mem:/ {print $2}')
    googlecompute:       +spaceavail=$(df -k / | awk 'END {print $4}')
    googlecompute:       +
    googlecompute:       +if [[ $# -eq 1 ]]; then
    googlecompute:       +  if [[ $1 == "disable" ]]; then
    googlecompute:       +    if swapon -s | grep -q "$swapfile"; then
    googlecompute:       +      swapoff "$swapfile" && exit 0
    googlecompute:       +      exit 1
    googlecompute:       +    fi
    googlecompute:       +    exit 0
    googlecompute:       +  fi
    googlecompute:       +
    googlecompute:       +  if [[ $1 == "remove" ]]; then
    googlecompute:       +    if swapon -s | grep -q "$swapfile"; then
    googlecompute:       +      swapoff "$swapfile" && rm -f "$swapfile"
    googlecompute:       +    fi
    googlecompute:       +    sed -i -e "\!^$swapfile !d" /etc/fstab && exit 0
    googlecompute:       +    exit 1
    googlecompute:       +  fi
    googlecompute:       +fi
    googlecompute:       +
    googlecompute:       +if [[ "$memavail" -lt "$memsmall" && "$spaceavail" -gt "$spacelimit" ]]; then
    googlecompute:       +  if ! swapon -s | grep -q $swapfile; then
    googlecompute:       +    dd if=/dev/zero of="$swapfile" bs=1K count="$swapsize" status=none
    googlecompute:       +    chmod 0600 "$swapfile"
    googlecompute:       +    mkswap -L c2dswap "$swapfile"
    googlecompute:       +    swapon "$swapfile"
    googlecompute:       +    if ! grep -q "^$swapfile " /etc/fstab; then
    googlecompute:       +      echo "$swapfile none swap sw 0 0" >> /etc/fstab
    googlecompute:       +    fi
    googlecompute:       +  else
    googlecompute:       +    echo "swapfile: $swapfile already enabled."
    googlecompute:       +  fi
    googlecompute:       +else
    googlecompute:       +  echo "swap not enabled: available memory over $memsmall or not enough free space on disk."
    googlecompute:       +fi
    googlecompute:       - change mode from '' to '0755'
    googlecompute:       - change owner from '' to 'root'
    googlecompute:       - change group from '' to 'root'
    googlecompute:
    googlecompute:   * cookbook_file[/lib/systemd/system/google-c2d-startup.service] action create
    googlecompute:     - create new file /lib/systemd/system/google-c2d-startup.service
    googlecompute:     - update content in file /lib/systemd/system/google-c2d-startup.service from none to 34ff14
    googlecompute:     --- /lib/systemd/system/google-c2d-startup.service	2022-12-14 14:06:20.467725509 +0000
    googlecompute:     +++ /lib/systemd/system/.chef-google-c2d-startup20221214-663-h0hzjh.service	2022-12-14 14:06:20.467725509 +0000
    googlecompute:     @@ -1 +1,25 @@
    googlecompute:     +# Copyright 2017 Google Inc.
    googlecompute:     +#
    googlecompute:     +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:     +# you may not use this file except in compliance with the License.
    googlecompute:     +# You may obtain a copy of the License at
    googlecompute:     +#
    googlecompute:     +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:     +#
    googlecompute:     +# Unless required by applicable law or agreed to in writing, software
    googlecompute:     +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:     +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:     +# See the License for the specific language governing permissions and
    googlecompute:     +# limitations under the License.
    googlecompute:     +
    googlecompute:     +[Unit]
    googlecompute:     +Description=Google C2D startup config
    googlecompute:     +[Service]
    googlecompute:     +Type=oneshot
    googlecompute:     +WorkingDirectory=/opt/c2d
    googlecompute:     +ExecStart=/opt/c2d/c2d-startup
    googlecompute:     +RemainAfterExit=true
    googlecompute:     +StandardOutput=journal
    googlecompute:     +[Install]
    googlecompute:     +WantedBy=multi-user.target
    googlecompute:     - change mode from '' to '0644'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute:   * service[google-c2d-startup.service] action enable
    googlecompute:     - enable service service[google-c2d-startup.service]
    googlecompute:   * directory[/opt/c2d/downloads] action create
    googlecompute:     - create new directory /opt/c2d/downloads
    googlecompute:     - change mode from '' to '0755'
    googlecompute:     - change owner from '' to 'root'
    googlecompute:     - change group from '' to 'root'
    googlecompute: Recipe: apache2::default
    googlecompute:   * apt_update[] action update
    googlecompute:     * directory[/var/lib/apt/periodic] action create (up to date)
    googlecompute:     * directory[/etc/apt/apt.conf.d] action create (up to date)
    googlecompute:     * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing (up to date)
    googlecompute:     * execute[apt-get -q update] action run
    googlecompute:       - execute ["apt-get", "-q", "update"]
    googlecompute:     - force update new lists of packages
    googlecompute:   * apt_package[install_packages] action install
    googlecompute:     - install version 2.4.38-3+deb10u8 of package apache2
    googlecompute:   * service[apache2] action enable (up to date)
    googlecompute:   * service[apache2] action restart
    googlecompute:     - restart service service[apache2]
    googlecompute: Recipe: apache2::security-config
    googlecompute:   * bash[modify security.conf] action run
    googlecompute:     - execute "bash"
    googlecompute:   * service[apache2] action restart
    googlecompute:     - restart service service[apache2]
    googlecompute: Recipe: mysql::install-mysql-apt-config
    googlecompute:   * apt_package[wget] action install
    googlecompute:     - install version 1.20.1-1.1 of package wget
    googlecompute:   * remote_file[/tmp/mysql-apt-config_0.8.22-1_all.deb] action create
    googlecompute:     - create new file /tmp/mysql-apt-config_0.8.22-1_all.deb
    googlecompute:     - update content in file /tmp/mysql-apt-config_0.8.22-1_all.deb from none to 42fe83
    googlecompute:     (new content is binary, diff output suppressed)
    googlecompute:   * apt_package[mysql-apt-config] action install
    googlecompute:     - install version 0.8.22-1 of package mysql-apt-config
    googlecompute: Recipe: mysql::configure-apt-repo-version-5.7
    googlecompute:   * bash[configure mysql-apt-config v5.7] action run
    googlecompute:     - execute "bash"
    googlecompute: Recipe: mysql::install-and-configure-mysqld
    googlecompute:   * apt_package[install_packages] action install
    googlecompute:     - install version 5.7.40-1debian10 of package mysql-server
    googlecompute:     - install version 5.7.40-1debian10 of package mysql-client
    googlecompute:   * template[/etc/mysql/mysql.conf.d/mysqld.cnf] action create
    googlecompute:     - update content in file /etc/mysql/mysql.conf.d/mysqld.cnf from 68aa81 to e87e3f
    googlecompute:     --- /etc/mysql/mysql.conf.d/mysqld.cnf	2022-08-30 04:38:04.000000000 +0000
    googlecompute:     +++ /etc/mysql/mysql.conf.d/.chef-mysqld20221214-663-fmv8r7.cnf	2022-12-14 14:06:56.801745886 +0000
    googlecompute:     @@ -1,20 +1,13 @@
    googlecompute:     -# Copyright (c) 2014, 2022, Oracle and/or its affiliates.
    googlecompute:     +# Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
    googlecompute:      #
    googlecompute:      # This program is free software; you can redistribute it and/or modify
    googlecompute:     -# it under the terms of the GNU General Public License, version 2.0,
    googlecompute:     -# as published by the Free Software Foundation.
    googlecompute:     +# it under the terms of the GNU General Public License as published by
    googlecompute:     +# the Free Software Foundation; version 2 of the License.
    googlecompute:      #
    googlecompute:     -# This program is also distributed with certain software (including
    googlecompute:     -# but not limited to OpenSSL) that is licensed under separate terms,
    googlecompute:     -# as designated in a particular file or component or in included license
    googlecompute:     -# documentation.  The authors of MySQL hereby grant you an additional
    googlecompute:     -# permission to link the program and your derivative works with the
    googlecompute:     -# separately licensed software that they have included with MySQL.
    googlecompute:     -#
    googlecompute:      # This program is distributed in the hope that it will be useful,
    googlecompute:      # but WITHOUT ANY WARRANTY; without even the implied warranty of
    googlecompute:      # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    googlecompute:     -# GNU General Public License, version 2.0, for more details.
    googlecompute:     +# GNU General Public License for more details.
    googlecompute:      #
    googlecompute:      # You should have received a copy of the GNU General Public License
    googlecompute:      # along with this program; if not, write to the Free Software
    googlecompute:     @@ -27,12 +20,13 @@
    googlecompute:      # http://dev.mysql.com/doc/mysql/en/server-system-variables.html
    googlecompute:
    googlecompute:      [mysqld]
    googlecompute:     -pid-file	= /var/run/mysqld/mysqld.pid
    googlecompute:     -socket		= /var/run/mysqld/mysqld.sock
    googlecompute:     -datadir		= /var/lib/mysql
    googlecompute:     -log-error	= /var/log/mysql/error.log
    googlecompute:     -# By default we only accept connections from localhost
    googlecompute:     -bind-address	= 127.0.0.1
    googlecompute:     +pid-file        = /var/run/mysqld/mysqld.pid
    googlecompute:     +socket          = /var/run/mysqld/mysqld.sock
    googlecompute:     +datadir         = /var/lib/mysql
    googlecompute:     +log-error       = /var/log/mysql/error.log
    googlecompute:     +bind-address    = localhost
    googlecompute:     +log-bin-trust-function-creators = 0
    googlecompute:     +
    googlecompute:      # Disabling symbolic-links is recommended to prevent assorted security risks
    googlecompute:      symbolic-links=0
    googlecompute:   * c2d_startup_script[mysql] action cookbook_file
    googlecompute:     * cookbook_file[/opt/c2d/scripts/01-mysql] action create
    googlecompute:       - create new file /opt/c2d/scripts/01-mysql
    googlecompute:       - update content in file /opt/c2d/scripts/01-mysql from none to 487121
    googlecompute:       --- /opt/c2d/scripts/01-mysql	2022-12-14 14:06:56.813774916 +0000
    googlecompute:       +++ /opt/c2d/scripts/.chef-01-mysql20221214-663-w6abo7	2022-12-14 14:06:56.813774916 +0000
    googlecompute:       @@ -1 +1,20 @@
    googlecompute:       +#!/bin/bash -eu
    googlecompute:       +#
    googlecompute:       +# Copyright 2017 Google Inc.
    googlecompute:       +#
    googlecompute:       +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:       +# you may not use this file except in compliance with the License.
    googlecompute:       +# You may obtain a copy of the License at
    googlecompute:       +#
    googlecompute:       +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:       +#
    googlecompute:       +# Unless required by applicable law or agreed to in writing, software
    googlecompute:       +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:       +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:       +# See the License for the specific language governing permissions and
    googlecompute:       +# limitations under the License.
    googlecompute:       +
    googlecompute:       +until mysqladmin ping --user=root > /dev/null 2>&1; do
    googlecompute:       +  sleep 3
    googlecompute:       +done
    googlecompute:       - change mode from '' to '0755'
    googlecompute:       - change owner from '' to 'root'
    googlecompute:       - change group from '' to 'root'
    googlecompute:
    googlecompute:   * bash[rm_test_db_and_users] action run
    googlecompute:     - execute "bash"
    googlecompute: Recipe: git::default
    googlecompute:   * apt_package[install packages] action install
    googlecompute:     - install version 1:2.20.1-2+deb10u5 of package git
    googlecompute: Recipe: ruby::default
    googlecompute:   * apt_update[] action update
    googlecompute:     * directory[/var/lib/apt/periodic] action create (up to date)
    googlecompute:     * directory[/etc/apt/apt.conf.d] action create (up to date)
    googlecompute:     * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing (up to date)
    googlecompute:     * execute[apt-get -q update] action run
    googlecompute:       - execute ["apt-get", "-q", "update"]
    googlecompute:     - force update new lists of packages
    googlecompute:   * apt_package[install packages] action install
    googlecompute:     - install version 4:8.3.0-1 of package gcc
    googlecompute:     - install version 1.1.1n-0+deb10u3 of package libssl-dev
    googlecompute:     - install version 4.2.1-1.2 of package make
    googlecompute:     - install version 1:1.2.11.dfsg-1+deb10u2 of package zlib1g-dev
    googlecompute:   * remote_file[/tmp/ruby.tar.gz] action create
    googlecompute:     - create new file /tmp/ruby.tar.gz
    googlecompute:     - update content in file /tmp/ruby.tar.gz from none to 34ee64
    googlecompute:     (file sizes exceed 10000000 bytes, diff output suppressed)
    googlecompute:   * bash[unpackage ruby, compile ruby, and install ruby] action run
    googlecompute:     - execute "bash"
    googlecompute: Recipe: stackdriver::logging
    googlecompute:   * remote_file[/tmp/add-logging-agent-repo.sh] action create
    googlecompute:     - create new file /tmp/add-logging-agent-repo.sh
    googlecompute:     - update content in file /tmp/add-logging-agent-repo.sh from none to 89364e
    googlecompute:     --- /tmp/add-logging-agent-repo.sh	2022-12-14 14:15:07.377071190 +0000
    googlecompute:     +++ /tmp/.chef-add-logging-agent-repo20221214-663-tzia53.sh	2022-12-14 14:15:07.377071190 +0000
    googlecompute:     @@ -1 +1,523 @@
    googlecompute:     +#!/bin/bash
    googlecompute:     +# Copyright 2020 Google Inc. All rights reserved.
    googlecompute:     +#
    googlecompute:     +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:     +# you may not use this file except in compliance with the License.
    googlecompute:     +# You may obtain a copy of the License at
    googlecompute:     +#
    googlecompute:     +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:     +#
    googlecompute:     +# Unless required by applicable law or agreed to in writing, software
    googlecompute:     +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:     +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:     +# See the License for the specific language governing permissions and
    googlecompute:     +# limitations under the License.
    googlecompute:     +#
    googlecompute:     +# Add repository for the Google logging agent.
    googlecompute:     +#
    googlecompute:     +# This script adds the required apt or yum repository and installs or uninstalls
    googlecompute:     +# the agent based on the corresponding flags.
    googlecompute:     +#
    googlecompute:     +# Available flags:
    googlecompute:     +# *  `--verbose`:
    googlecompute:     +#     Turns on verbose logging during the script execution, which is helpful for
    googlecompute:     +#     debugging purposes.
    googlecompute:     +#
    googlecompute:     +# *  `--also-install`:
    googlecompute:     +#     Installs the agent after adding the agent package repository. If this flag
    googlecompute:     +#     is absent, the script only adds the agent package repository. This flag
    googlecompute:     +#     can not be run with the `--uninstall` flag.
    googlecompute:     +#
    googlecompute:     +# *  `--version <VERSION>`:
    googlecompute:     +#     Sets the agent version for the script to install. Allowed formats:
    googlecompute:     +#    *  `latest`:
    googlecompute:     +#        Adds an agent package repository that contains all agent versions, and
    googlecompute:     +#        installs the latest version of the agent.
    googlecompute:     +#    *  `MAJOR_VERSION.*.*`:
    googlecompute:     +#        Adds an agent package repository that contains all agent versions up to
    googlecompute:     +#        this major version (e.g. `1.*.*`), and installs the latest version of
    googlecompute:     +#        the agent within the range of that major version.
    googlecompute:     +#    *  `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION`:
    googlecompute:     +#        Adds an agent package repository that contains all agent versions, and
    googlecompute:     +#        installs the specified version of the agent (e.g. `3.2.1`).
    googlecompute:     +#
    googlecompute:     +# *  `--uninstall`:
    googlecompute:     +#     Uninstalls the agent. This flag can not be run with the `--also-install`
    googlecompute:     +#     flag.
    googlecompute:     +#
    googlecompute:     +# *  `--remove-repo`:
    googlecompute:     +#     Removes the corresponding agent package repository after installing or
    googlecompute:     +#     uninstalling the agent.
    googlecompute:     +#
    googlecompute:     +# *  `--dry-run`:
    googlecompute:     +#     Triggers only a dry run of the script execution and prints out the
    googlecompute:     +#     commands that it is supposed to execute. This is helpful to know what
    googlecompute:     +#     actions the script will take.
    googlecompute:     +#
    googlecompute:     +# *  `--structured`:
    googlecompute:     +#    When installing or uninstalling packages, use the structured catch-all
    googlecompute:     +#    config package.
    googlecompute:     +#
    googlecompute:     +# *  `--unstructured`:
    googlecompute:     +#    When installing or uninstalling packages, use the unstructured catch-all
    googlecompute:     +#    config package. This is currently the default.
    googlecompute:     +#
    googlecompute:     +# Sample usage:
    googlecompute:     +# *  To add the repo that contains all agent versions, run:
    googlecompute:     +#    $ bash add-logging-agent-repo.sh
    googlecompute:     +#
    googlecompute:     +# *  To add the repo and also install the agent, run:
    googlecompute:     +#    $ bash add-logging-agent-repo.sh --also-install --version=<AGENT_VERSION>
    googlecompute:     +#
    googlecompute:     +# *  To uninstall the agent run:
    googlecompute:     +#    $ bash add-logging-agent-repo.sh --uninstall
    googlecompute:     +#
    googlecompute:     +# *  To uninstall the agent and remove the repo, run:
    googlecompute:     +#    $ bash add-logging-agent-repo.sh --uninstall --remove-repo
    googlecompute:     +#
    googlecompute:     +# *  To run the script with verbose logging, run:
    googlecompute:     +#    $ bash add-logging-agent-repo.sh --also-install --verbose
    googlecompute:     +#
    googlecompute:     +# *  To run the script in dry-run mode, run:
    googlecompute:     +#    $ bash add-logging-agent-repo.sh --also-install --dry-run
    googlecompute:     +#
    googlecompute:     +# The environment variable `DO_NOT_INSTALL_CATCH_ALL_CONFIG` can be set to
    googlecompute:     +# prevent the google-fluentd-catch-all-config package from being installed.
    googlecompute:     +#
    googlecompute:     +# Internal usage only:
    googlecompute:     +# The environment variable `REPO_SUFFIX` can be set to alter which repository is
    googlecompute:     +# used. A dash (-) will be inserted prior to the supplied suffix. `REPO_SUFFIX`
    googlecompute:     +# defaults to `all` which contains all agent versions across different major
    googlecompute:     +# versions. The full repository name is:
    googlecompute:     +# "google-cloud-logging-<DISTRO>[-<ARCH>]-<REPO_SUFFIX>".
    googlecompute:     +
    googlecompute:     +# Ignore the return code of command substitution in variables.
    googlecompute:     +# shellcheck disable=SC2155
    googlecompute:     +#
    googlecompute:     +# Initialize var used to notify config management tools of when a change is made.
    googlecompute:     +CHANGED=0
    googlecompute:     +
    googlecompute:     +fail() {
    googlecompute:     +  echo >&2 "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"
    googlecompute:     +  exit 1
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# Parsing flag value.
    googlecompute:     +declare -a ACTIONS=()
    googlecompute:     +DRY_RUN=''
    googlecompute:     +VERBOSE='false'
    googlecompute:     +declare -a STRUCTURED_FLAGS=()
    googlecompute:     +while getopts -- '-:' OPTCHAR; do
    googlecompute:     +  case "${OPTCHAR}" in
    googlecompute:     +    -)
    googlecompute:     +      case "${OPTARG}" in
    googlecompute:     +        # Note: Do not remove entries from this list when deprecating flags.
    googlecompute:     +        # That would break user scripts that specify those flags. Instead,
    googlecompute:     +        # leave the flag in place but make it a noop.
    googlecompute:     +        also-install) ACTIONS+=('also-install') ;;
    googlecompute:     +        version=*) AGENT_VERSION="${OPTARG#*=}" ;;
    googlecompute:     +        uninstall) ACTIONS+=('uninstall') ;;
    googlecompute:     +        remove-repo) ACTIONS+=('remove-repo') ;;
    googlecompute:     +        dry-run) echo 'Starting dry run'; DRY_RUN='dryrun' ;;
    googlecompute:     +        verbose) VERBOSE='true' ;;
    googlecompute:     +        structured) STRUCTURED_FLAGS+=('true') ;;
    googlecompute:     +        unstructured) STRUCTURED_FLAGS+=('false') ;;
    googlecompute:     +        *) fail "Unknown option '${OPTARG}'." ;;
    googlecompute:     +      esac
    googlecompute:     +  esac
    googlecompute:     +done
    googlecompute:     +[[ "${ACTIONS[*]}" == *uninstall* || ( "${ACTIONS[*]}" == *remove-repo* && "${ACTIONS[*]}" != *also-install* )]] || \
    googlecompute:     +  ACTIONS+=('add-repo')
    googlecompute:     +# Sort the actions array for easier parsing.
    googlecompute:     +readarray -t ACTIONS < <(printf '%s\n' "${ACTIONS[@]}" | sort)
    googlecompute:     +readonly ACTIONS DRY_RUN VERBOSE
    googlecompute:     +# Sort the structured flags array for easier parsing.
    googlecompute:     +readarray -t STRUCTURED_FLAGS < <(printf '%s\n' "${STRUCTURED_FLAGS[@]}" | sort)
    googlecompute:     +readonly STRUCTURED_FLAGS
    googlecompute:     +
    googlecompute:     +if [[ "${ACTIONS[*]}" == *also-install*uninstall* ]]; then
    googlecompute:     +  fail "Received conflicting flags 'also-install' and 'uninstall'."
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +if [[ "${STRUCTURED_FLAGS[*]}" == *false*true* ]]; then
    googlecompute:     +  fail "Received conflicting flags 'structured' and 'unstructured'."
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +if [[ ! ("${ACTIONS[*]}" == *also-install* || "${ACTIONS[*]}" == *uninstall* ) && -n "${STRUCTURED_FLAGS[*]}" ]]; then
    googlecompute:     +  fail "The 'structured' and 'unstructured' flags are only used in 'also-install' or 'uninstall' mode."
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +if [[ "${VERBOSE}" == 'true' ]]; then
    googlecompute:     +  echo 'Enable verbose logging.'
    googlecompute:     +  set -x
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +# Host that serves the repositories.
    googlecompute:     +REPO_HOST='packages.cloud.google.com'
    googlecompute:     +
    googlecompute:     +# URL for the logging agent documentation.
    googlecompute:     +AGENT_DOCS_URL='https://cloud.google.com/logging/docs/agent'
    googlecompute:     +
    googlecompute:     +# URL documentation which lists supported platforms for running the logging agent.
    googlecompute:     +AGENT_SUPPORTED_URL="${AGENT_DOCS_URL}/#agent-os-list"
    googlecompute:     +
    googlecompute:     +# Packages to install.
    googlecompute:     +AGENT_PACKAGE='google-fluentd'
    googlecompute:     +if [[ -z "${DO_NOT_INSTALL_CATCH_ALL_CONFIG:-}" ]]; then
    googlecompute:     +  if [[ "${STRUCTURED_FLAGS[*]}" == *true* ]]; then
    googlecompute:     +    declare -a ADDITIONAL_PACKAGES=('google-fluentd-catch-all-config-structured')
    googlecompute:     +  else
    googlecompute:     +    declare -a ADDITIONAL_PACKAGES=('google-fluentd-catch-all-config')
    googlecompute:     +  fi
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +if [[ -f /etc/os-release ]]; then
    googlecompute:     +  . /etc/os-release
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +# If dry-run mode is enabled, echo VM state-changing commands instead of executing them.
    googlecompute:     +dryrun() {
    googlecompute:     +  # Needed for commands that use pipes.
    googlecompute:     +  if [[ ! -t 0 ]]; then
    googlecompute:     +    cat
    googlecompute:     +  fi
    googlecompute:     +  printf -v cmd_str '%q ' "$@"
    googlecompute:     +  echo "DRY_RUN: Not executing '$cmd_str'"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +refresh_failed() {
    googlecompute:     +  local REPO_TYPE="$1"
    googlecompute:     +  local OS_FAMILY="$2"
    googlecompute:     +  fail "Could not refresh the google-cloud-logging ${REPO_TYPE} repositories.
    googlecompute:     +Please check your network connectivity and make sure you are running a supported
    googlecompute:     +${OS_FAMILY} distribution. See ${AGENT_SUPPORTED_URL}
    googlecompute:     +for a list of supported platforms."
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +resolve_version() {
    googlecompute:     + if [[ "${AGENT_VERSION:-latest}" == 'latest' ]]; then
    googlecompute:     +   AGENT_VERSION=''
    googlecompute:     + elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +   REPO_SUFFIX="${REPO_SUFFIX:-"${AGENT_VERSION%%.*}"}"
    googlecompute:     + elif ! grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +   fail "The agent version [${AGENT_VERSION}] is not allowed. Expected values: [latest],
    googlecompute:     +or anything in the format of [MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION] or [MAJOR_VERSION.*.*]."
    googlecompute:     + fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_debian() {
    googlecompute:     +  declare -a EXTRA_OPTS=()
    googlecompute:     +  [[ "${VERBOSE}" == 'true' ]] && EXTRA_OPTS+=(-oDebug::pkgAcquire::Worker=1)
    googlecompute:     +
    googlecompute:     +  add_repo() {
    googlecompute:     +    [[ -n "${REPO_CODENAME:-}" ]] || lsb_release -v >/dev/null 2>&1 || { \
    googlecompute:     +      apt-get update; apt-get -y install lsb-release; CHANGED=1;
    googlecompute:     +    }
    googlecompute:     +    [[ "$(dpkg -l apt-transport-https 2>&1 | grep -o '^[a-z][a-z]')" == 'ii' ]] || { \
    googlecompute:     +      ${DRY_RUN} apt-get update; ${DRY_RUN} apt-get -y install apt-transport-https; CHANGED=1;
    googlecompute:     +    }
    googlecompute:     +    [[ "$(dpkg -l ca-certificates 2>&1 | grep -o '^[a-z][a-z]')" == 'ii' ]] || { \
    googlecompute:     +      ${DRY_RUN} apt-get update; ${DRY_RUN} apt-get -y install ca-certificates; CHANGED=1;
    googlecompute:     +    }
    googlecompute:     +    local CODENAME="${REPO_CODENAME:-"$(lsb_release -sc)"}"
    googlecompute:     +    local REPO_NAME="google-cloud-logging-${CODENAME}-${REPO_SUFFIX:-all}"
    googlecompute:     +    local REPO_DATA="deb https://${REPO_HOST}/apt ${REPO_NAME} main"
    googlecompute:     +    if ! cmp -s <<<"${REPO_DATA}" - /etc/apt/sources.list.d/google-cloud-logging.list; then
    googlecompute:     +      echo "Adding agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} tee <<<"${REPO_DATA}" /etc/apt/sources.list.d/google-cloud-logging.list
    googlecompute:     +      ${DRY_RUN} curl --connect-timeout 5 -s -f "https://${REPO_HOST}/apt/doc/apt-key.gpg" \
    googlecompute:     +        | ${DRY_RUN} apt-key add -
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  remove_repo() {
    googlecompute:     +    if [[ -f /etc/apt/sources.list.d/google-cloud-logging.list ]]; then
    googlecompute:     +      echo "Removing agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} rm /etc/apt/sources.list.d/google-cloud-logging.list
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  expected_version_installed() {
    googlecompute:     +    [[ "$(dpkg -l "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" 2>&1 | grep -o '^[a-z][a-z]' | sort -u)" == 'ii' ]] || \
    googlecompute:     +      return
    googlecompute:     +    if [[ -z "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +      apt-get --dry-run install "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qo '^0 upgraded, 0 newly installed'
    googlecompute:     +    elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +      dpkg -l "${AGENT_PACKAGE}" | grep -qE "$AGENT_PACKAGE $AGENT_VERSION" && \
    googlecompute:     +        apt-get --dry-run install "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qo '^0 upgraded, 0 newly installed'
    googlecompute:     +    else
    googlecompute:     +      dpkg -l "${AGENT_PACKAGE}" | grep -qE "$AGENT_PACKAGE $AGENT_VERSION"
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  install_agent() {
    googlecompute:     +    ${DRY_RUN} apt-get update || refresh_failed 'apt' "${ID}"
    googlecompute:     +    expected_version_installed || { \
    googlecompute:     +      if [[ -n "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +        # Differentiate `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION` from `MAJOR_VERSION.*.*`.
    googlecompute:     +        # apt package version format: e.g. 1.8.0-1.
    googlecompute:     +        if grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION}-*"
    googlecompute:     +        else
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION%.\*}"
    googlecompute:     +        fi
    googlecompute:     +      fi
    googlecompute:     +      ${DRY_RUN} apt-get -y --allow-downgrades "${EXTRA_OPTS[@]}" install "${AGENT_PACKAGE}${AGENT_VERSION}" \
    googlecompute:     +        "${ADDITIONAL_PACKAGES[@]}" || fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} \
    googlecompute:     +installation failed."
    googlecompute:     +      echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} installation succeeded."
    googlecompute:     +      CHANGED=1
    googlecompute:     +    }
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  uninstall_agent() {
    googlecompute:     +     # Return early unless at least one package is installed.
    googlecompute:     +     dpkg -l "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" 2>&1 | grep -qo '^ii' || return
    googlecompute:     +     ${DRY_RUN} apt-get -y "${EXTRA_OPTS[@]}" remove "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" || \
    googlecompute:     +       fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation failed."
    googlecompute:     +     echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation succeeded."
    googlecompute:     +     CHANGED=1
    googlecompute:     +  }
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_rpm() {
    googlecompute:     +  declare -a EXTRA_OPTS=()
    googlecompute:     +  [[ "${VERBOSE}" == 'true' ]] && EXTRA_OPTS+=(-v)
    googlecompute:     +
    googlecompute:     +  add_repo() {
    googlecompute:     +    local REPO_NAME="google-cloud-logging-${CODENAME}-\$basearch-${REPO_SUFFIX:-all}"
    googlecompute:     +    local REPO_DATA="\
    googlecompute:     +[google-cloud-logging]
    googlecompute:     +name=Google Cloud Logging Agent Repository
    googlecompute:     +baseurl=https://${REPO_HOST}/yum/repos/${REPO_NAME}
    googlecompute:     +autorefresh=0
    googlecompute:     +enabled=1
    googlecompute:     +type=rpm-md
    googlecompute:     +gpgcheck=1
    googlecompute:     +repo_gpgcheck=0
    googlecompute:     +gpgkey=https://${REPO_HOST}/yum/doc/yum-key.gpg
    googlecompute:     +       https://${REPO_HOST}/yum/doc/rpm-package-key.gpg"
    googlecompute:     +    if ! cmp -s <<<"${REPO_DATA}" - /etc/yum.repos.d/google-cloud-logging.repo; then
    googlecompute:     +      echo "Adding agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} tee <<<"${REPO_DATA}" /etc/yum.repos.d/google-cloud-logging.repo
    googlecompute:     +      # After repo upgrades, CentOS7/RHEL7 won't pick up newly available packages
    googlecompute:     +      # until the cache is cleared.
    googlecompute:     +      ${DRY_RUN} rm -rf /var/cache/yum/*/*/google-cloud-logging/
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  remove_repo() {
    googlecompute:     +    if [[ -f /etc/yum.repos.d/google-cloud-logging.repo ]]; then
    googlecompute:     +      echo "Removing agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} rm /etc/yum.repos.d/google-cloud-logging.repo
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  expected_version_installed() {
    googlecompute:     +    rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1 || return
    googlecompute:     +    if [[ -z "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +      yum -y check-update "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1
    googlecompute:     +    elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +      CURRENT_VERSION="$(rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}")"
    googlecompute:     +      grep -qE "${AGENT_VERSION}" <<<"${CURRENT_VERSION}" && \
    googlecompute:     +      yum -y check-update "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1
    googlecompute:     +    else
    googlecompute:     +      CURRENT_VERSION="$(rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}")"
    googlecompute:     +      [[ "${AGENT_VERSION}" == "${CURRENT_VERSION}" ]]
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  install_agent() {
    googlecompute:     +    expected_version_installed || { \
    googlecompute:     +      ${DRY_RUN} yum -y list updates || refresh_failed 'yum' "${ID}"
    googlecompute:     +      local COMMAND='install'
    googlecompute:     +      if [[ -n "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +        [[ -z "${CURRENT_VERSION:-}" ]] || \
    googlecompute:     +        [[ "${AGENT_VERSION}" == "$(sort -rV <<<"${AGENT_VERSION}"$'\n'"${CURRENT_VERSION}" | head -1)" ]] || \
    googlecompute:     +          COMMAND='downgrade'
    googlecompute:     +        # Differentiate `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION` from `MAJOR_VERSION.*.*`.
    googlecompute:     +        # yum package version format: e.g. 1.0.1-1.el8.
    googlecompute:     +        if grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="-${AGENT_VERSION}-1*"
    googlecompute:     +        else
    googlecompute:     +          AGENT_VERSION="-${AGENT_VERSION}"
    googlecompute:     +        fi
    googlecompute:     +      fi
    googlecompute:     +      ${DRY_RUN} yum -y "${EXTRA_OPTS[@]}" "${COMMAND}" "${AGENT_PACKAGE}${AGENT_VERSION}" \
    googlecompute:     +        "${ADDITIONAL_PACKAGES[@]}" || fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} \
    googlecompute:     +installation failed."
    googlecompute:     +      echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} installation succeeded."
    googlecompute:     +      CHANGED=1
    googlecompute:     +    }
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  uninstall_agent() {
    googlecompute:     +     # Return early if none of the packages are installed.
    googlecompute:     +     rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" | grep -qvE 'is not installed$' || return
    googlecompute:     +     ${DRY_RUN} yum -y "${EXTRA_OPTS[@]}" remove "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" || \
    googlecompute:     +       fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation failed."
    googlecompute:     +     echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation succeeded."
    googlecompute:     +     CHANGED=1
    googlecompute:     +  }
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_redhat() {
    googlecompute:     +  local MAJOR_VERSION="$(rpm --eval %{?rhel})"
    googlecompute:     +  CODENAME="el${MAJOR_VERSION}"
    googlecompute:     +  handle_rpm
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_amazon_linux() {
    googlecompute:     +  CODENAME='el6'
    googlecompute:     +  handle_rpm
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_suse() {
    googlecompute:     +  declare -a EXTRA_OPTS=()
    googlecompute:     +  [[ "${VERBOSE}" == 'true' ]] && EXTRA_OPTS+=(-vv)
    googlecompute:     +
    googlecompute:     +  add_repo() {
    googlecompute:     +    local SUSE_VERSION=${VERSION_ID%%.*}
    googlecompute:     +    local CODENAME="sles${SUSE_VERSION}"
    googlecompute:     +    local REPO_NAME="google-cloud-logging-${CODENAME}-\$basearch-${REPO_SUFFIX:-all}"
    googlecompute:     +    {
    googlecompute:     +      ${DRY_RUN} zypper --non-interactive refresh || { \
    googlecompute:     +        echo >&2 'Could not refresh zypper repositories.'; \
    googlecompute:     +        echo >&2 'This is not necessarily a fatal error; proceeding...'; \
    googlecompute:     +      }
    googlecompute:     +    } | grep -qF 'Retrieving repository' || [[ -n "${DRY_RUN:-}" ]] && CHANGED=1
    googlecompute:     +    local REPO_DATA="\
    googlecompute:     +[google-cloud-logging]
    googlecompute:     +name=Google Cloud Logging Agent Repository
    googlecompute:     +baseurl=https://${REPO_HOST}/yum/repos/${REPO_NAME}
    googlecompute:     +autorefresh=0
    googlecompute:     +enabled=1
    googlecompute:     +type=rpm-md
    googlecompute:     +gpgkey=https://${REPO_HOST}/yum/doc/yum-key.gpg
    googlecompute:     +       https://${REPO_HOST}/yum/doc/rpm-package-key.gpg"
    googlecompute:     +    if ! cmp -s <<<"${REPO_DATA}" - /etc/zypp/repos.d/google-cloud-logging.repo; then
    googlecompute:     +      echo "Adding agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} tee <<<"${REPO_DATA}" /etc/zypp/repos.d/google-cloud-logging.repo
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +    local RPM_KEYS="$(rpm --query gpg-pubkey)"  # Save the installed keys.
    googlecompute:     +    ${DRY_RUN} rpm --import "https://${REPO_HOST}/yum/doc/yum-key.gpg" "https://${REPO_HOST}/yum/doc/rpm-package-key.gpg"
    googlecompute:     +    if [[ -n "${DRY_RUN:-}" ]] || ! cmp --silent <<<"${RPM_KEYS}" - <(rpm --query gpg-pubkey); then
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +    {
    googlecompute:     +      ${DRY_RUN} zypper --non-interactive --gpg-auto-import-keys refresh google-cloud-logging || \
    googlecompute:     +        refresh_failed 'zypper' "${ID}"; \
    googlecompute:     +    } | grep -qF 'Retrieving repository' || [[ -n "${DRY_RUN:-}" ]] && CHANGED=1
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  remove_repo() {
    googlecompute:     +    if [[ -f /etc/zypp/repos.d/google-cloud-logging.repo ]]; then
    googlecompute:     +      echo "Removing agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} rm /etc/zypp/repos.d/google-cloud-logging.repo
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  expected_version_installed() {
    googlecompute:     +    rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1 || return
    googlecompute:     +    if [[ -z "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +      zypper --non-interactive update --dry-run "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qE '^Nothing to do.'
    googlecompute:     +    elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +      rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}" | grep -qE "${AGENT_VERSION}" && \
    googlecompute:     +      zypper --non-interactive update --dry-run "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qE '^Nothing to do.'
    googlecompute:     +    else
    googlecompute:     +      [[ "${AGENT_VERSION}" == "$(rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}")" ]]
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  install_agent() {
    googlecompute:     +    expected_version_installed || { \
    googlecompute:     +      if [[ -n "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +        # Differentiate `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION` from `MAJOR_VERSION.*.*`.
    googlecompute:     +        # zypper package version format: e.g. 1.0.6-1.sles15.
    googlecompute:     +        if grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="<$(( ${AGENT_VERSION%%.*} + 1 ))"
    googlecompute:     +        else
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION}"
    googlecompute:     +        fi
    googlecompute:     +      fi
    googlecompute:     +      ${DRY_RUN} zypper --non-interactive "${EXTRA_OPTS[@]}" install --oldpackage "${AGENT_PACKAGE}${AGENT_VERSION}" \
    googlecompute:     +        "${ADDITIONAL_PACKAGES[@]}" || fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} \
    googlecompute:     +installation failed."
    googlecompute:     +      echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} installation succeeded."
    googlecompute:     +      CHANGED=1
    googlecompute:     +    }
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  uninstall_agent() {
    googlecompute:     +     # Return early if none of the packages are installed.
    googlecompute:     +     rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" | grep -qvE 'is not installed$' || return
    googlecompute:     +     ${DRY_RUN} zypper --non-interactive "${EXTRA_OPTS[@]}" remove "${AGENT_PACKAGE}" || \
    googlecompute:     +       fail "${AGENT_PACKAGE} uninstallation failed."
    googlecompute:     +     # zypper doesn't like removing packages that are not installed.
    googlecompute:     +     if rpm -q "${ADDITIONAL_PACKAGES[@]}" | grep -qvE 'is not installed$'; then
    googlecompute:     +       ${DRY_RUN} zypper --non-interactive "${EXTRA_OPTS[@]}" remove "${ADDITIONAL_PACKAGES[@]}" || \
    googlecompute:     +         fail "${ADDITIONAL_PACKAGES[*]} uninstallation failed."
    googlecompute:     +     fi
    googlecompute:     +     echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation succeeded."
    googlecompute:     +     CHANGED=1
    googlecompute:     +  }
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +main() {
    googlecompute:     +  case "${ID:-}" in
    googlecompute:     +    amzn) handle_amazon_linux ;;
    googlecompute:     +    debian|ubuntu) handle_debian ;;
    googlecompute:     +    rhel|centos) handle_redhat ;;
    googlecompute:     +    sles|opensuse-leap) handle_suse ;;
    googlecompute:     +    *)
    googlecompute:     +      # Fallback for systems lacking /etc/os-release.
    googlecompute:     +      if [[ -f /etc/debian_version ]]; then
    googlecompute:     +        ID='debian'
    googlecompute:     +        handle_debian
    googlecompute:     +      elif [[ -f /etc/redhat-release ]]; then
    googlecompute:     +        ID='rhel'
    googlecompute:     +        handle_redhat
    googlecompute:     +      elif [[ -f /etc/SuSE-release ]]; then
    googlecompute:     +        ID='sles'
    googlecompute:     +        handle_suse
    googlecompute:     +      else
    googlecompute:     +        fail "Unidentifiable or unsupported platform. See
    googlecompute:     +${AGENT_SUPPORTED_URL} for a list of supported platforms."
    googlecompute:     +      fi
    googlecompute:     +  esac
    googlecompute:     +
    googlecompute:     +  if [[ "${ACTIONS[*]}" == *add-repo* ]]; then
    googlecompute:     +    resolve_version
    googlecompute:     +    add_repo
    googlecompute:     +  fi
    googlecompute:     +  if [[ "${ACTIONS[*]}" == *also-install* ]]; then
    googlecompute:     +    install_agent
    googlecompute:     +  elif [[ "${ACTIONS[*]}" == *uninstall* ]]; then
    googlecompute:     +    uninstall_agent
    googlecompute:     +  fi
    googlecompute:     +  if [[ "${ACTIONS[*]}" == *remove-repo* ]]; then
    googlecompute:     +    remove_repo
    googlecompute:     +  fi
    googlecompute:     +
    googlecompute:     +  if [[ "${CHANGED}" == 0 ]]; then
    googlecompute:     +    echo 'No changes made.'
    googlecompute:     +  fi
    googlecompute:     +
    googlecompute:     +  if [[ -n "${DRY_RUN:-}" ]]; then
    googlecompute:     +    echo 'Finished dry run. This was only a simulation, remove the --dry-run flag
    googlecompute:     +to perform an actual execution of the script.'
    googlecompute:     +  fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +main "$@"
    googlecompute:   * execute[bash /tmp/add-logging-agent-repo.sh] action run
    googlecompute:     - execute bash /tmp/add-logging-agent-repo.sh
    googlecompute:   * apt_update[] action update
    googlecompute:     * directory[/var/lib/apt/periodic] action create (up to date)
    googlecompute:     * directory[/etc/apt/apt.conf.d] action create (up to date)
    googlecompute:     * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing (up to date)
    googlecompute:     * execute[apt-get -q update] action run
    googlecompute:       - execute ["apt-get", "-q", "update"]
    googlecompute:     - force update new lists of packages
    googlecompute:   * apt_package[Install Packages] action install
    googlecompute:     - install version 1.9.9-1 of package google-fluentd
    googlecompute:     - install version 0.8.0 of package google-fluentd-catch-all-config
    googlecompute: Recipe: stackdriver::monitoring
    googlecompute:   * remote_file[/tmp/add-monitoring-agent-repo.sh] action create
    googlecompute:     - create new file /tmp/add-monitoring-agent-repo.sh
    googlecompute:     - update content in file /tmp/add-monitoring-agent-repo.sh from none to b6648e
    googlecompute:     --- /tmp/add-monitoring-agent-repo.sh	2022-12-14 14:15:20.249937022 +0000
    googlecompute:     +++ /tmp/.chef-add-monitoring-agent-repo20221214-663-idyks2.sh	2022-12-14 14:15:20.245936753 +0000
    googlecompute:     @@ -1 +1,505 @@
    googlecompute:     +#!/bin/bash
    googlecompute:     +# Copyright 2020 Google Inc. All rights reserved.
    googlecompute:     +#
    googlecompute:     +# Licensed under the Apache License, Version 2.0 (the "License");
    googlecompute:     +# you may not use this file except in compliance with the License.
    googlecompute:     +# You may obtain a copy of the License at
    googlecompute:     +#
    googlecompute:     +#     http://www.apache.org/licenses/LICENSE-2.0
    googlecompute:     +#
    googlecompute:     +# Unless required by applicable law or agreed to in writing, software
    googlecompute:     +# distributed under the License is distributed on an "AS IS" BASIS,
    googlecompute:     +# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    googlecompute:     +# See the License for the specific language governing permissions and
    googlecompute:     +# limitations under the License.
    googlecompute:     +#
    googlecompute:     +# Add repository for the Google monitoring agent.
    googlecompute:     +#
    googlecompute:     +# This script adds the required apt or yum repository and installs or uninstalls
    googlecompute:     +# the agent based on the corresponding flags.
    googlecompute:     +#
    googlecompute:     +# Available flags:
    googlecompute:     +# *  `--verbose`:
    googlecompute:     +#     Turns on verbose logging during the script execution, which is helpful for
    googlecompute:     +#     debugging purposes.
    googlecompute:     +#
    googlecompute:     +# *  `--also-install`:
    googlecompute:     +#     Installs the agent after adding the agent package repository. If this flag
    googlecompute:     +#     is absent, the script only adds the agent package repository. This flag
    googlecompute:     +#     can not be run with the `--uninstall` flag.
    googlecompute:     +#
    googlecompute:     +# *  `--version <VERSION>`:
    googlecompute:     +#     Sets the agent version for the script to install. Allowed formats:
    googlecompute:     +#    *  `latest`:
    googlecompute:     +#        Adds an agent package repository that contains all agent versions, and
    googlecompute:     +#        installs the latest version of the agent.
    googlecompute:     +#    *  `MAJOR_VERSION.*.*`:
    googlecompute:     +#        Adds an agent package repository that contains all agent versions up to
    googlecompute:     +#        this major version (e.g. `1.*.*`), and installs the latest version of
    googlecompute:     +#        the agent within the range of that major version.
    googlecompute:     +#    *  `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION`:
    googlecompute:     +#        Adds an agent package repository that contains all agent versions, and
    googlecompute:     +#        installs the specified version of the agent (e.g. `3.2.1`).
    googlecompute:     +#
    googlecompute:     +# *  `--uninstall`:
    googlecompute:     +#     Uninstalls the agent. This flag can not be run with the `--also-install`
    googlecompute:     +#     flag.
    googlecompute:     +#
    googlecompute:     +# *  `--remove-repo`:
    googlecompute:     +#     Removes the corresponding agent package repository after installing or
    googlecompute:     +#     uninstalling the agent.
    googlecompute:     +#
    googlecompute:     +# *  `--dry-run`:
    googlecompute:     +#     Triggers only a dry run of the script execution and prints out the
    googlecompute:     +#     commands that it is supposed to execute. This is helpful to know what
    googlecompute:     +#     actions the script will take.
    googlecompute:     +#
    googlecompute:     +# Sample usage:
    googlecompute:     +# *  To add the repo that contains all agent versions, run:
    googlecompute:     +#    $ bash add-monitoring-agent-repo.sh
    googlecompute:     +#
    googlecompute:     +# *  To add the repo and also install the agent, run:
    googlecompute:     +#    $ bash add-monitoring-agent-repo.sh --also-install --version=<AGENT_VERSION>
    googlecompute:     +#
    googlecompute:     +# *  To uninstall the agent run:
    googlecompute:     +#    $ bash add-monitoring-agent-repo.sh --uninstall
    googlecompute:     +#
    googlecompute:     +# *  To uninstall the agent and remove the repo, run:
    googlecompute:     +#    $ bash add-monitoring-agent-repo.sh --uninstall --remove-repo
    googlecompute:     +#
    googlecompute:     +# *  To run the script with verbose logging, run:
    googlecompute:     +#    $ bash add-monitoring-agent-repo.sh --also-install --verbose
    googlecompute:     +#
    googlecompute:     +# *  To run the script in dry-run mode, run:
    googlecompute:     +#    $ bash add-monitoring-agent-repo.sh --also-install --dry-run
    googlecompute:     +#
    googlecompute:     +# Internal usage only:
    googlecompute:     +# The environment variable `REPO_SUFFIX` can be set to alter which repository is
    googlecompute:     +# used. A dash (-) will be inserted prior to the supplied suffix. `REPO_SUFFIX`
    googlecompute:     +# defaults to `all` which contains all agent versions across different major
    googlecompute:     +# versions. The full repository name is:
    googlecompute:     +# "google-cloud-monitoring-<DISTRO>[-<ARCH>]-<REPO_SUFFIX>".
    googlecompute:     +
    googlecompute:     +# Ignore the return code of command substitution in variables.
    googlecompute:     +# shellcheck disable=SC2155
    googlecompute:     +#
    googlecompute:     +# Initialize var used to notify config management tools of when a change is made.
    googlecompute:     +CHANGED=0
    googlecompute:     +
    googlecompute:     +fail() {
    googlecompute:     +  echo >&2 "[$(date +'%Y-%m-%dT%H:%M:%S%z')] $*"
    googlecompute:     +  exit 1
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +# Parsing flag value.
    googlecompute:     +declare -a ACTIONS=()
    googlecompute:     +DRY_RUN=''
    googlecompute:     +VERBOSE='false'
    googlecompute:     +while getopts -- '-:' OPTCHAR; do
    googlecompute:     +  case "${OPTCHAR}" in
    googlecompute:     +    -)
    googlecompute:     +      case "${OPTARG}" in
    googlecompute:     +        # Note: Do not remove entries from this list when deprecating flags.
    googlecompute:     +        # That would break user scripts that specify those flags. Instead,
    googlecompute:     +        # leave the flag in place but make it a noop.
    googlecompute:     +        also-install) ACTIONS+=('also-install') ;;
    googlecompute:     +        version=*) AGENT_VERSION="${OPTARG#*=}" ;;
    googlecompute:     +        uninstall) ACTIONS+=('uninstall') ;;
    googlecompute:     +        remove-repo) ACTIONS+=('remove-repo') ;;
    googlecompute:     +        dry-run) echo 'Starting dry run'; DRY_RUN='dryrun' ;;
    googlecompute:     +        verbose) VERBOSE='true' ;;
    googlecompute:     +        *) fail "Unknown option '${OPTARG}'." ;;
    googlecompute:     +      esac
    googlecompute:     +  esac
    googlecompute:     +done
    googlecompute:     +[[ "${ACTIONS[*]}" == *uninstall* || ( "${ACTIONS[*]}" == *remove-repo* && "${ACTIONS[*]}" != *also-install* )]] || \
    googlecompute:     +  ACTIONS+=('add-repo')
    googlecompute:     +# Sort the actions array for easier parsing.
    googlecompute:     +readarray -t ACTIONS < <(printf '%s\n' "${ACTIONS[@]}" | sort)
    googlecompute:     +readonly ACTIONS DRY_RUN VERBOSE
    googlecompute:     +
    googlecompute:     +if [[ "${ACTIONS[*]}" == *also-install*uninstall* ]]; then
    googlecompute:     +    fail "Received conflicting flags 'also-install' and 'uninstall'."
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +if [[ "${VERBOSE}" == 'true' ]]; then
    googlecompute:     +  echo 'Enable verbose logging.'
    googlecompute:     +  set -x
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +# Host that serves the repositories.
    googlecompute:     +REPO_HOST='packages.cloud.google.com'
    googlecompute:     +
    googlecompute:     +# URL for the monitoring agent documentation.
    googlecompute:     +AGENT_DOCS_URL='https://cloud.google.com/monitoring/agent'
    googlecompute:     +
    googlecompute:     +# URL documentation which lists supported platforms for running the monitoring agent.
    googlecompute:     +AGENT_SUPPORTED_URL="${AGENT_DOCS_URL}/#supported_operating_systems"
    googlecompute:     +
    googlecompute:     +# Packages to install.
    googlecompute:     +AGENT_PACKAGE='stackdriver-agent'
    googlecompute:     +declare -a ADDITIONAL_PACKAGES=()
    googlecompute:     +
    googlecompute:     +if [[ -f /etc/os-release ]]; then
    googlecompute:     +  . /etc/os-release
    googlecompute:     +fi
    googlecompute:     +
    googlecompute:     +# If dry-run mode is enabled, echo VM state-changing commands instead of executing them.
    googlecompute:     +dryrun() {
    googlecompute:     +  # Needed for commands that use pipes.
    googlecompute:     +  if [[ ! -t 0 ]]; then
    googlecompute:     +    cat
    googlecompute:     +  fi
    googlecompute:     +  printf -v cmd_str '%q ' "$@"
    googlecompute:     +  echo "DRY_RUN: Not executing '$cmd_str'"
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +refresh_failed() {
    googlecompute:     +  local REPO_TYPE="$1"
    googlecompute:     +  local OS_FAMILY="$2"
    googlecompute:     +  fail "Could not refresh the google-cloud-monitoring ${REPO_TYPE} repositories.
    googlecompute:     +Please check your network connectivity and make sure you are running a supported
    googlecompute:     +${OS_FAMILY} distribution. See ${AGENT_SUPPORTED_URL}
    googlecompute:     +for a list of supported platforms."
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +resolve_version() {
    googlecompute:     + if [[ "${AGENT_VERSION:-latest}" == 'latest' ]]; then
    googlecompute:     +   AGENT_VERSION=''
    googlecompute:     + # `MAJOR_VERSION.*.*`.
    googlecompute:     + elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +   REPO_SUFFIX="${REPO_SUFFIX:-"${AGENT_VERSION%%.*}"}"
    googlecompute:     + elif ! grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' <<<"${AGENT_VERSION}" && ! grep -qE '^5.5.2-100.*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +   fail "The agent version [${AGENT_VERSION}] is not allowed. Expected values: [latest],
    googlecompute:     +or anything in the format of [MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION] or [MAJOR_VERSION.*.*] or [5.5.2-100.*]."
    googlecompute:     +
    googlecompute:     + fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_debian() {
    googlecompute:     +  declare -a EXTRA_OPTS=()
    googlecompute:     +  [[ "${VERBOSE}" == 'true' ]] && EXTRA_OPTS+=(-oDebug::pkgAcquire::Worker=1)
    googlecompute:     +
    googlecompute:     +  add_repo() {
    googlecompute:     +    [[ -n "${REPO_CODENAME:-}" ]] || lsb_release -v >/dev/null 2>&1 || { \
    googlecompute:     +      apt-get update; apt-get -y install lsb-release; CHANGED=1;
    googlecompute:     +    }
    googlecompute:     +    [[ "$(dpkg -l apt-transport-https 2>&1 | grep -o '^[a-z][a-z]')" == 'ii' ]] || { \
    googlecompute:     +      ${DRY_RUN} apt-get update; ${DRY_RUN} apt-get -y install apt-transport-https; CHANGED=1;
    googlecompute:     +    }
    googlecompute:     +    [[ "$(dpkg -l ca-certificates 2>&1 | grep -o '^[a-z][a-z]')" == 'ii' ]] || { \
    googlecompute:     +      ${DRY_RUN} apt-get update; ${DRY_RUN} apt-get -y install ca-certificates; CHANGED=1;
    googlecompute:     +    }
    googlecompute:     +    local CODENAME="${REPO_CODENAME:-"$(lsb_release -sc)"}"
    googlecompute:     +    local REPO_NAME="google-cloud-monitoring-${CODENAME}-${REPO_SUFFIX:-all}"
    googlecompute:     +    local REPO_DATA="deb https://${REPO_HOST}/apt ${REPO_NAME} main"
    googlecompute:     +    if ! cmp -s <<<"${REPO_DATA}" - /etc/apt/sources.list.d/google-cloud-monitoring.list; then
    googlecompute:     +      echo "Adding agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} tee <<<"${REPO_DATA}" /etc/apt/sources.list.d/google-cloud-monitoring.list
    googlecompute:     +      ${DRY_RUN} curl --connect-timeout 5 -s -f "https://${REPO_HOST}/apt/doc/apt-key.gpg" \
    googlecompute:     +        | ${DRY_RUN} apt-key add -
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  remove_repo() {
    googlecompute:     +    if [[ -f /etc/apt/sources.list.d/google-cloud-monitoring.list ]]; then
    googlecompute:     +      echo "Removing agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} rm /etc/apt/sources.list.d/google-cloud-monitoring.list
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  expected_version_installed() {
    googlecompute:     +    [[ "$(dpkg -l "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" 2>&1 | grep -o '^[a-z][a-z]' | sort -u)" == 'ii' ]] || \
    googlecompute:     +      return
    googlecompute:     +    if [[ -z "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +      apt-get --dry-run install "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qo '^0 upgraded, 0 newly installed'
    googlecompute:     +    elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +      dpkg -l "${AGENT_PACKAGE}" | grep -qE "$AGENT_PACKAGE $AGENT_VERSION" && \
    googlecompute:     +        apt-get --dry-run install "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qo '^0 upgraded, 0 newly installed'
    googlecompute:     +    else
    googlecompute:     +      dpkg -l "${AGENT_PACKAGE}" | grep -qE "$AGENT_PACKAGE $AGENT_VERSION"
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  install_agent() {
    googlecompute:     +    ${DRY_RUN} apt-get update || refresh_failed 'apt' "${ID}"
    googlecompute:     +    expected_version_installed || { \
    googlecompute:     +      if [[ -n "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +        # apt package version format: e.g. 1.8.0-1.
    googlecompute:     +        # `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION`.
    googlecompute:     +        if grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION}-*"
    googlecompute:     +        # 5.5.2-100.*
    googlecompute:     +        elif grep -qE '^5.5.2-100.*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION}*"
    googlecompute:     +        # `MAJOR_VERSION.*.*`.
    googlecompute:     +        else
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION%.\*}"
    googlecompute:     +        fi
    googlecompute:     +      fi
    googlecompute:     +      ${DRY_RUN} apt-get -y --allow-downgrades "${EXTRA_OPTS[@]}" install "${AGENT_PACKAGE}${AGENT_VERSION}" \
    googlecompute:     +        "${ADDITIONAL_PACKAGES[@]}" || fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} \
    googlecompute:     +installation failed."
    googlecompute:     +      echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} installation succeeded."
    googlecompute:     +      CHANGED=1
    googlecompute:     +    }
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  uninstall_agent() {
    googlecompute:     +     # Return early unless at least one package is installed.
    googlecompute:     +     dpkg -l "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" 2>&1 | grep -qo '^ii' || return
    googlecompute:     +     ${DRY_RUN} apt-get -y "${EXTRA_OPTS[@]}" remove "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" || \
    googlecompute:     +       fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation failed."
    googlecompute:     +     echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation succeeded."
    googlecompute:     +     CHANGED=1
    googlecompute:     +  }
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_rpm() {
    googlecompute:     +  declare -a EXTRA_OPTS=()
    googlecompute:     +  [[ "${VERBOSE}" == 'true' ]] && EXTRA_OPTS+=(-v)
    googlecompute:     +
    googlecompute:     +  add_repo() {
    googlecompute:     +    local REPO_NAME="google-cloud-monitoring-${CODENAME}-\$basearch-${REPO_SUFFIX:-all}"
    googlecompute:     +    local REPO_DATA="\
    googlecompute:     +[google-cloud-monitoring]
    googlecompute:     +name=Google Cloud Monitoring Agent Repository
    googlecompute:     +baseurl=https://${REPO_HOST}/yum/repos/${REPO_NAME}
    googlecompute:     +autorefresh=0
    googlecompute:     +enabled=1
    googlecompute:     +type=rpm-md
    googlecompute:     +gpgcheck=1
    googlecompute:     +repo_gpgcheck=0
    googlecompute:     +gpgkey=https://${REPO_HOST}/yum/doc/yum-key.gpg
    googlecompute:     +       https://${REPO_HOST}/yum/doc/rpm-package-key.gpg"
    googlecompute:     +    if ! cmp -s <<<"${REPO_DATA}" - /etc/yum.repos.d/google-cloud-monitoring.repo; then
    googlecompute:     +      echo "Adding agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} tee <<<"${REPO_DATA}" /etc/yum.repos.d/google-cloud-monitoring.repo
    googlecompute:     +      # After repo upgrades, CentOS7/RHEL7 won't pick up newly available packages
    googlecompute:     +      # until the cache is cleared.
    googlecompute:     +      ${DRY_RUN} rm -rf /var/cache/yum/*/*/google-cloud-monitoring/
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  remove_repo() {
    googlecompute:     +    if [[ -f /etc/yum.repos.d/google-cloud-monitoring.repo ]]; then
    googlecompute:     +      echo "Removing agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} rm /etc/yum.repos.d/google-cloud-monitoring.repo
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  expected_version_installed() {
    googlecompute:     +    rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1 || return
    googlecompute:     +    if [[ -z "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +      yum -y check-update "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1
    googlecompute:     +    elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +      CURRENT_VERSION="$(rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}")"
    googlecompute:     +      grep -qE "${AGENT_VERSION}" <<<"${CURRENT_VERSION}" && \
    googlecompute:     +      yum -y check-update "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1
    googlecompute:     +    else
    googlecompute:     +      CURRENT_VERSION="$(rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}")"
    googlecompute:     +      [[ "${AGENT_VERSION}" == "${CURRENT_VERSION}" ]]
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  install_agent() {
    googlecompute:     +    expected_version_installed || { \
    googlecompute:     +      ${DRY_RUN} yum -y list updates || refresh_failed 'yum' "${ID}"
    googlecompute:     +      local COMMAND='install'
    googlecompute:     +      if [[ -n "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +        [[ -z "${CURRENT_VERSION:-}" ]] || \
    googlecompute:     +        [[ "${AGENT_VERSION}" == "$(sort -rV <<<"${AGENT_VERSION}"$'\n'"${CURRENT_VERSION}" | head -1)" ]] || \
    googlecompute:     +          COMMAND='downgrade'
    googlecompute:     +        # yum package version format: e.g. 1.0.1-1.el8.
    googlecompute:     +        # `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION`.
    googlecompute:     +        if grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="-${AGENT_VERSION}-1*"
    googlecompute:     +        # 5.5.2-100.*
    googlecompute:     +        elif grep -qE '^5.5.2-100.*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="-${AGENT_VERSION}*"
    googlecompute:     +        # `MAJOR_VERSION.*.*`.
    googlecompute:     +        else
    googlecompute:     +          AGENT_VERSION="-${AGENT_VERSION}"
    googlecompute:     +        fi
    googlecompute:     +      fi
    googlecompute:     +      ${DRY_RUN} yum -y "${EXTRA_OPTS[@]}" "${COMMAND}" "${AGENT_PACKAGE}${AGENT_VERSION}" \
    googlecompute:     +        "${ADDITIONAL_PACKAGES[@]}" || fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} \
    googlecompute:     +installation failed."
    googlecompute:     +      echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} installation succeeded."
    googlecompute:     +      CHANGED=1
    googlecompute:     +    }
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  uninstall_agent() {
    googlecompute:     +     # Return early if none of the packages are installed.
    googlecompute:     +     rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" | grep -qvE 'is not installed$' || return
    googlecompute:     +     ${DRY_RUN} yum -y "${EXTRA_OPTS[@]}" remove "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" || \
    googlecompute:     +       fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation failed."
    googlecompute:     +     echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation succeeded."
    googlecompute:     +     CHANGED=1
    googlecompute:     +  }
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_redhat() {
    googlecompute:     +  local MAJOR_VERSION="$(rpm --eval %{?rhel})"
    googlecompute:     +  CODENAME="el${MAJOR_VERSION}"
    googlecompute:     +  handle_rpm
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_amazon_linux() {
    googlecompute:     +  CODENAME='amzn'
    googlecompute:     +  handle_rpm
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +handle_suse() {
    googlecompute:     +  declare -a EXTRA_OPTS=()
    googlecompute:     +  [[ "${VERBOSE}" == 'true' ]] && EXTRA_OPTS+=(-vv)
    googlecompute:     +
    googlecompute:     +  add_repo() {
    googlecompute:     +    local SUSE_VERSION=${VERSION_ID%%.*}
    googlecompute:     +    local CODENAME="sles${SUSE_VERSION}"
    googlecompute:     +    local REPO_NAME="google-cloud-monitoring-${CODENAME}-\$basearch-${REPO_SUFFIX:-all}"
    googlecompute:     +    {
    googlecompute:     +      ${DRY_RUN} zypper --non-interactive refresh || { \
    googlecompute:     +        echo >&2 'Could not refresh zypper repositories.'; \
    googlecompute:     +        echo >&2 'This is not necessarily a fatal error; proceeding...'; \
    googlecompute:     +      }
    googlecompute:     +    } | grep -qF 'Retrieving repository' || [[ -n "${DRY_RUN:-}" ]] && CHANGED=1
    googlecompute:     +    local REPO_DATA="\
    googlecompute:     +[google-cloud-monitoring]
    googlecompute:     +name=Google Cloud Monitoring Agent Repository
    googlecompute:     +baseurl=https://${REPO_HOST}/yum/repos/${REPO_NAME}
    googlecompute:     +autorefresh=0
    googlecompute:     +enabled=1
    googlecompute:     +type=rpm-md
    googlecompute:     +gpgkey=https://${REPO_HOST}/yum/doc/yum-key.gpg
    googlecompute:     +       https://${REPO_HOST}/yum/doc/rpm-package-key.gpg"
    googlecompute:     +    if ! cmp -s <<<"${REPO_DATA}" - /etc/zypp/repos.d/google-cloud-monitoring.repo; then
    googlecompute:     +      echo "Adding agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} tee <<<"${REPO_DATA}" /etc/zypp/repos.d/google-cloud-monitoring.repo
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +    local RPM_KEYS="$(rpm --query gpg-pubkey)"  # Save the installed keys.
    googlecompute:     +    ${DRY_RUN} rpm --import "https://${REPO_HOST}/yum/doc/yum-key.gpg" "https://${REPO_HOST}/yum/doc/rpm-package-key.gpg"
    googlecompute:     +    if [[ -n "${DRY_RUN:-}" ]] || ! cmp --silent <<<"${RPM_KEYS}" - <(rpm --query gpg-pubkey); then
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +    {
    googlecompute:     +      ${DRY_RUN} zypper --non-interactive --gpg-auto-import-keys refresh google-cloud-monitoring || \
    googlecompute:     +        refresh_failed 'zypper' "${ID}"; \
    googlecompute:     +    } | grep -qF 'Retrieving repository' || [[ -n "${DRY_RUN:-}" ]] && CHANGED=1
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  remove_repo() {
    googlecompute:     +    if [[ -f /etc/zypp/repos.d/google-cloud-monitoring.repo ]]; then
    googlecompute:     +      echo "Removing agent repository for ${ID}."
    googlecompute:     +      ${DRY_RUN} rm /etc/zypp/repos.d/google-cloud-monitoring.repo
    googlecompute:     +      CHANGED=1
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  expected_version_installed() {
    googlecompute:     +    rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" >/dev/null 2>&1 || return
    googlecompute:     +    if [[ -z "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +      zypper --non-interactive update --dry-run "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qE '^Nothing to do.'
    googlecompute:     +    elif grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +      rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}" | grep -qE "${AGENT_VERSION}" && \
    googlecompute:     +      zypper --non-interactive update --dry-run "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" \
    googlecompute:     +        | grep -qE '^Nothing to do.'
    googlecompute:     +    else
    googlecompute:     +      [[ "${AGENT_VERSION}" == "$(rpm -q --queryformat '%{VERSION}' "${AGENT_PACKAGE}")" ]]
    googlecompute:     +    fi
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  install_agent() {
    googlecompute:     +    expected_version_installed || { \
    googlecompute:     +      if [[ -n "${AGENT_VERSION:-}" ]]; then
    googlecompute:     +        # zypper package version format: e.g. 1.0.6-1.sles15.
    googlecompute:     +        # `MAJOR_VERSION.*.*`.
    googlecompute:     +        if grep -qE '^[0-9]+\.\*\.\*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          AGENT_VERSION="<$(( ${AGENT_VERSION%%.*} + 1 ))"
    googlecompute:     +        # 5.5.2-100.*
    googlecompute:     +        elif grep -qE '^5.5.2-100.*$' <<<"${AGENT_VERSION}"; then
    googlecompute:     +          SUSE_VERSION=${VERSION%%-*}
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION}.${ID}${SUSE_VERSION}"
    googlecompute:     +        # `MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION`
    googlecompute:     +        else
    googlecompute:     +          AGENT_VERSION="=${AGENT_VERSION}"
    googlecompute:     +        fi
    googlecompute:     +      fi
    googlecompute:     +      ${DRY_RUN} zypper --non-interactive "${EXTRA_OPTS[@]}" install --oldpackage "${AGENT_PACKAGE}${AGENT_VERSION}" \
    googlecompute:     +        "${ADDITIONAL_PACKAGES[@]}" || fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} \
    googlecompute:     +installation failed."
    googlecompute:     +      if grep -qE '.*5.5.2-100.*' <<<"${AGENT_VERSION}"; then
    googlecompute:     +        systemctl daemon-reload
    googlecompute:     +      fi
    googlecompute:     +      echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} installation succeeded."
    googlecompute:     +      CHANGED=1
    googlecompute:     +    }
    googlecompute:     +  }
    googlecompute:     +
    googlecompute:     +  uninstall_agent() {
    googlecompute:     +     # Return early if none of the packages are installed.
    googlecompute:     +     rpm -q "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" | grep -qvE 'is not installed$' || return
    googlecompute:     +     ${DRY_RUN} zypper --non-interactive "${EXTRA_OPTS[@]}" remove "${AGENT_PACKAGE}" "${ADDITIONAL_PACKAGES[@]}" || \
    googlecompute:     +       fail "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation failed."
    googlecompute:     +     echo "${AGENT_PACKAGE} ${ADDITIONAL_PACKAGES[*]} uninstallation succeeded."
    googlecompute:     +     CHANGED=1
    googlecompute:     +  }
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +main() {
    googlecompute:     +  case "${ID:-}" in
    googlecompute:     +    amzn) handle_amazon_linux ;;
    googlecompute:     +    debian|ubuntu) handle_debian ;;
    googlecompute:     +    rhel|centos) handle_redhat ;;
    googlecompute:     +    sles|opensuse-leap) handle_suse ;;
    googlecompute:     +    *)
    googlecompute:     +      # Fallback for systems lacking /etc/os-release.
    googlecompute:     +      if [[ -f /etc/debian_version ]]; then
    googlecompute:     +        ID='debian'
    googlecompute:     +        handle_debian
    googlecompute:     +      elif [[ -f /etc/redhat-release ]]; then
    googlecompute:     +        ID='rhel'
    googlecompute:     +        handle_redhat
    googlecompute:     +      elif [[ -f /etc/SuSE-release ]]; then
    googlecompute:     +        ID='sles'
    googlecompute:     +        handle_suse
    googlecompute:     +      else
    googlecompute:     +        fail "Unidentifiable or unsupported platform. See
    googlecompute:     +${AGENT_SUPPORTED_URL} for a list of supported platforms."
    googlecompute:     +      fi
    googlecompute:     +  esac
    googlecompute:     +
    googlecompute:     +  if [[ "${ACTIONS[*]}" == *add-repo* ]]; then
    googlecompute:     +    resolve_version
    googlecompute:     +    add_repo
    googlecompute:     +  fi
    googlecompute:     +  if [[ "${ACTIONS[*]}" == *also-install* ]]; then
    googlecompute:     +    install_agent
    googlecompute:     +  elif [[ "${ACTIONS[*]}" == *uninstall* ]]; then
    googlecompute:     +    uninstall_agent
    googlecompute:     +  fi
    googlecompute:     +  if [[ "${ACTIONS[*]}" == *remove-repo* ]]; then
    googlecompute:     +    remove_repo
    googlecompute:     +  fi
    googlecompute:     +
    googlecompute:     +  if [[ "${CHANGED}" == 0 ]]; then
    googlecompute:     +    echo 'No changes made.'
    googlecompute:     +  fi
    googlecompute:     +
    googlecompute:     +  if [[ -n "${DRY_RUN:-}" ]]; then
    googlecompute:     +    echo 'Finished dry run. This was only a simulation, remove the --dry-run flag
    googlecompute:     +to perform an actual execution of the script.'
    googlecompute:     +  fi
    googlecompute:     +}
    googlecompute:     +
    googlecompute:     +main "$@"
    googlecompute:   * execute[bash /tmp/add-monitoring-agent-repo.sh] action run
    googlecompute:     - execute bash /tmp/add-monitoring-agent-repo.sh
    googlecompute:   * apt_update[] action update
    googlecompute:     * directory[/var/lib/apt/periodic] action create (up to date)
    googlecompute:     * directory[/etc/apt/apt.conf.d] action create (up to date)
    googlecompute:     * file[/etc/apt/apt.conf.d/15update-stamp] action create_if_missing (up to date)
    googlecompute:     * execute[apt-get -q update] action run
    googlecompute:       - execute ["apt-get", "-q", "update"]
    googlecompute:     - force update new lists of packages
    googlecompute:   * apt_package[Install Packages] action install
    googlecompute:     - install version 6.3.0-1.buster of package stackdriver-agent
    googlecompute:
    googlecompute: Running handlers:
    googlecompute: Running handlers complete
    googlecompute: Infra Phase complete, 46/61 resources updated in 09 minutes 23 seconds
==> googlecompute: Provisioning with shell script: /tmp/packer-shell3293914930
    googlecompute: Reading package lists...
    googlecompute: Building dependency tree...
    googlecompute: Reading state information...
    googlecompute: The following packages will be REMOVED:
    googlecompute:   chef*
    googlecompute: 0 upgraded, 0 newly installed, 1 to remove and 7 not upgraded.
    googlecompute: After this operation, 85.5 MB disk space will be freed.
    googlecompute: (Reading database ... 92844 files and directories currently installed.)
    googlecompute: Removing chef (17.6.18-1) ...
    googlecompute: (Reading database ... 83170 files and directories currently installed.)
    googlecompute: Purging configuration files for chef (17.6.18-1) ...
==> googlecompute: Provisioning with shell script: /tmp/packer-shell2949596146
    googlecompute: --> Stopping syslog service...
==> googlecompute: Synchronizing state of rsyslog.service with SysV service script with /lib/systemd/systemd-sysv-install.
==> googlecompute: Executing: /lib/systemd/systemd-sysv-install disable rsyslog
==> googlecompute: Removed /etc/systemd/system/multi-user.target.wants/rsyslog.service.
==> googlecompute: Removed /etc/systemd/system/syslog.service.
==> googlecompute: Synchronizing state of rsyslog.service with SysV service script with /lib/systemd/systemd-sysv-install.
==> googlecompute: Executing: /lib/systemd/systemd-sysv-install enable rsyslog
==> googlecompute: Created symlink /etc/systemd/system/syslog.service â†’ /lib/systemd/system/rsyslog.service.
==> googlecompute: Created symlink /etc/systemd/system/multi-user.target.wants/rsyslog.service â†’ /lib/systemd/system/rsyslog.service.
    googlecompute: --> Stopping Google services...
==> googlecompute: Provisioning with shell script: /tmp/packer-shell3265204200
==> googlecompute: Deleting instance...
    googlecompute: Instance has been deleted!
==> googlecompute: Creating image...
==> googlecompute: Deleting disk...
    googlecompute: Disk has been deleted!
==> googlecompute: Running post-processor: shell-local
==> googlecompute (shell-local): Running local shell script: /tmp/packer-shell2191669566
    googlecompute (shell-local): --> Cleaning /etc/ssh/ssh_host_* ...
    googlecompute (shell-local):   > /etc/ssh/ssh_host_ecdsa_key: DONE
    googlecompute (shell-local):   > /etc/ssh/ssh_host_ecdsa_key.pub: DONE
    googlecompute (shell-local):   > /etc/ssh/ssh_host_ed25519_key: DONE
    googlecompute (shell-local):   > /etc/ssh/ssh_host_ed25519_key.pub: DONE
    googlecompute (shell-local):   > /etc/ssh/ssh_host_rsa_key: DONE
    googlecompute (shell-local):   > /etc/ssh/ssh_host_rsa_key.pub: DONE
    googlecompute (shell-local): --> Checking for existence of Root authorized_keys...
    googlecompute (shell-local): --> Cleaning home directories...
    googlecompute (shell-local): > Waiting for packer processes to terminate...
    googlecompute (shell-local): userdel: packer mail spool (/var/mail/packer) not found
    googlecompute (shell-local):   > packer: REMOVED
    googlecompute (shell-local): --> Removing google_users file...
    googlecompute (shell-local): --> Cleaning all log files...
    googlecompute (shell-local): SHUTDOWN SCRIPT COMPLETED
    googlecompute (shell-local): --> Shutdown script execution verified!
    googlecompute (shell-local): --> Deleting log file...
==> googlecompute (shell-local): Removing gs://ccm-ops-test-adhoc-imagebuilder/logs/shutdown-log-6399d81e-dedf-6856-c904-b1274c75d5e2.txt...
==> googlecompute (shell-local): / [1 objects]
==> googlecompute (shell-local): Operation completed over 1 objects.
Build 'googlecompute' finished after 11 minutes 36 seconds.

==> Wait completed after 11 minutes 36 seconds

==> Builds finished. The artifacts of successful builds are:
--> googlecompute: A disk image was created: rubystack-v1671026713812-pre
--> googlecompute: A disk image was created: rubystack-v1671026713812-pre
Updating labels of image [rubystack-v1671026713812-pre]...
......done.
==> Finished creating image rubystack-v1671026713812-pre
>>> All done.
The following configurations will be deleted:
 - imagebuilder14487
Deleted [imagebuilder14487].
