#!/bin/bash -eu
#
# Copyright 2020 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /opt/c2d/c2d-utils || exit 1

#######################################
# Checks if a host and port are opened
# Arguments:
#   Host name
#   Port number
#######################################
function await_for_host_and_port() {
  local -r HOST="$1"
  local -r PORT="$2"
  timeout --preserve-status 300 bash -c "until echo > /dev/tcp/${HOST}/${PORT}; do sleep 2; done"
  if [[ "$?" -ne 0 ]]; then
      exit 1
  fi
}

#######################################
# Generate a config file based on a template using environment variables.
# Arguments:
#  Directory where template and config files are located.
#  Template filename.
#  Generated filename
#######################################
function fill_in_config_template() {
  local -r base_dir="$1"
  local -r template_file="$2"
  local -r output_file="$3"

  cd "${base_dir}"
  mv "${template_file}" "${template_file}.orig"
  envsubst < "${template_file}.orig" > "${output_file}"
  rm "${template_file}.orig"
}

#######################################
# Check if user can connect to Elasticsearch API
# Arguments:
#  Elasticsearch host
#  Elasticsearch protocol
#  Elasticsearch user
#  Elasticsearch password
# Outputs:
#  String as '1' if user can connect or '0' if not
#######################################
function check_password() {
  local -r hostname="$1"
  local -r protocol="$2"
  local -r auth_user="$3"
  local -r auth_user_pass="$4"
  local -r endpoint="${protocol}://${hostname}:9200"

  if [[ "${protocol}" == "http" ]]; then
    response="$(curl -s -u "${auth_user}:${auth_user_pass}" \
      "${endpoint}" | jq -r '.status')"
  else
    response="$(curl -s -k -u "${auth_user}:${auth_user_pass}" \
      "${endpoint}" | jq -r '.status')"
  fi

  if [[ "${response}" == "401" ]]; then
    echo "1"
  else
    echo "0"
  fi
}

#######################################
# Creates an user at Elasticsearch with kibana_admin role.
# Arguments:
#  Elasticsearch host
#  Elasticsearch protocol
#  Elasticsearch user to authenticate
#  Elasticsearch password to authenticate
#  Elasticsearch user to be created
#  Elasticsearch password of the new user
#######################################
function create_user() {
  local -r hostname="$1"
  local -r protocol="$2"
  local -r auth_user="$3"
  local -r auth_user_pass="$4"
  local -r user_to_create="$5"
  local -r new_pass="$6"

  local -r endpoint="${protocol}://${hostname}:9200/_security/user/${user_to_create}"
  local response=""

  echo "Creating elasticsearch user"

  if [[ "${protocol}" == "http" ]]; then
    response="$(curl -X POST \
      -u "${auth_user}:${auth_user_pass}" \
      -d "{\"password\":\"${new_pass}\", \"roles\": [\"kibana_admin\"] }" \
      -H "Content-Type: application/json" \
      "${endpoint}")"
  else
    response="$(curl -k -X POST \
      -u "${auth_user}:${auth_user_pass}" \
      -d "{\"password\":\"${new_pass}\", \"roles\": [\"kibana_admin\"] }" \
      -H "Content-Type: application/json" \
      "${endpoint}")"
  fi

  if [[ "${response}" != '{"created":true}' ]]; then
    echo "User creation failed: ${response}"
    exit 1
  fi
}

#######################################
# Try to create an user with provided credentials
# Arguments:
#  Elasticsearch host
#  Elasticsearch protocol
#  Elasticsearch user to authenticate
#  Elasticsearch password to authenticate
#  Elasticsearch user to be created
#  Elasticsearch password of the new user
#######################################
function try_to_create_user() {
  local -r hostname="$1"
  local -r protocol="$2"
  local -r auth_user="$3"
  local -r auth_user_pass="$4"
  local -r user_to_create="$5"
  local -r new_pass="$6"

  local check_exit_code=1

  until [[ "${check_exit_code}" == "0" ]]; do
    sleep 3

    echo "Checking current password..."
    check_exit_code="$(check_password "${hostname}" "${protocol}" \
      "${auth_user}" "${auth_user_pass}")"

    if [[ "${check_exit_code}" == "0" ]]; then
      echo "ES Connection successful."
      echo "Creating user..."
      create_user "${hostname}" "${protocol}" \
        "${auth_user}" "${auth_user_pass}" \
        "${user_to_create}" "${new_pass}"
    else
      echo "ES Invalid credentials"
    fi
  done
}
