#!/bin/bash

source /opt/c2d/c2d-utils || exit 1

function emit_msg() {
  echo "$(date +"%I:%M:%S")" "${@}"
}

function run_query() {
  local -r command="$1"
  run_query "${command}"
}

# Add short hostname to /etc/hosts in order to be used in replication
# all nodes are added before restarting server
function add_short_hostnames() {
  local -r nodes="$1"
  local target_ip=""
  local target_host=""

  for node in ${nodes}; do
    target_ip="$(host ${node} | awk -F 'has address' '{ print $2 }' | tr -d ' ')"
    target_host="$(echo ${node} | grep -o -P "mariadb-vm-(\d*)")"
    echo "${target_ip} ${target_host}" >> /etc/hosts
  done
}

function bind_to_all_addresses() {
  sed -i "s/.*bind-address.*/bind-address = 0.0.0.0/" \
    /etc/mysql/mariadb.conf.d/50-server.cnf
}

function apply_master_replication_config() {
  local -r config_file="/etc/mysql/conf.d/replication.cnf"
  local -r patch="$(cat patch-replication \
                  | envsubst "\$SERVER_ID \$DATABASE_NAME")"
  echo "${patch}" >> "${config_file}"
}

function create_replication_users() {
  local -r nodes="$1"

  # Create replication users
  for minion in ${cluster_hostname_list}; do
    if [[ $minion != "${hostname}" ]]; then
      # Find minion internal IP
      minion_ip="$(host ${minion} | awk -F 'has address' '{ print $2 }' | tr -d ' ')"

      run_query "CREATE USER 'replication_user'@'${minion_ip}' IDENTIFIED BY '${mysql_replication_password}';"
      run_query "GRANT REPLICATION SLAVE ON *.* TO 'replication_user'@'${minion_ip}';"
    fi
  done
}

# TODO(armadom)
function set_root_user() {
  local root_password="$1"

  # Change root password
  run_query "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('${root_password}'); FLUSH PRIVILEGES;"
  # Create root user with possibility authorization from anywhere
  if [[ $root_from_anywhere == "True" ]]; then
    run_query "CREATE USER 'root'@'%' IDENTIFIED BY '${root_password}';"
    run_query "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION";
  fi
}

function create_backup() {
  mysqldump --all-databases --user root --master-data > all-databases.sql
}

function await_for_replicas_ssh() {
  local -r target_host="$1"
  local -r username="replication"
  local last_exitcode="255"

  while [[ "${last_exitcode}" -ne 0 ]]; do
    ssh ${username}@${target_host} -- cat /dev/null
    last_exitcode="$?"

    if [[ "${last_exitcode}" -ne 0 ]]; then
      emit_msg "Host ${target_host} not ready."
    fi
    sleep 3
  done
  emit_msg "Connected to ${target_host} with success."
}

function send_backup_to_replica() {
  local -r target_host="$1"
  local -r file="all-databases.sql"

  scp -o StrictHostKeyChecking=no "${file}" \
    replication@${target_host}:/tmp/transfer
}

function setup_master() {
  local -r nodes="$1"
  local -r root_password="$2"

  apply_master_replication_config

  # Start and await service to be up
  systemctl start mariadb
  until mysqladmin ping; do sleep 1; done

  create_replication_users "${nodes}"
  set_root_user "${root_password}"

  create_backup
  await_for_replicas_ssh

  for node in "${nodes}"; do
    send_backup_to_replica "${node}"
  done

  run_query "UNLOCK TABLES;"
}

function apply_replica_replication_config() {
  local -r config_file="/etc/mysql/conf.d/serverid.cnf"

  printf '%s\n' \
    "[mysqld]"   \
    "server-id=${SERVER_ID}"   \
    "replicate-do-db=${DATABASE_NAME}" > "${config_file}"
}

function await_for_node() {
  local node="$1"

  timeout --preserve-status 300 bash -c "until echo > /dev/tcp/${node}/3306; do sleep 2; done"
  if [[ "$?" -ne 0 ]]; then
      exit 1
  fi
}

function enable_ssh_on_replica() {
    # Add user
    adduser --disabled-password --gecos "" replication
    create_tmp_folder

    # Remove password
    sed -i -re 's/^replication:[^:]+:/replication::/' /etc/passwd /etc/shadow

    # Configure pam.d
    sed -i '/@include common-auth/r patch-pam-ssh' /etc/pam.d/sshd
    sed -i '/@include common-auth/d' /etc/pam.d/sshd

    # Configure sshd_config
    sed -i-re 's/^PasswordAuthentication no$/# PasswordAuthentication no/g' \
        /etc/ssh/sshd_config

    patch="$(cat patch-ssh | envsubst "\$MASTER_HOST_IP")"
    echo "${patch}" >> /etc/ssh/sshd_config

    systemctl restart ssh
}


function await_for_backup_file() {
  local target_folder="/tmp/transfer/"
  local file_count=0

  while [[ "${file_count}" -eq 0 ]]; do
    emit_msg "Checking if backup has been transfered."
    file_count="$(find "${target_folder}" -maxdepth 1 -not -type d | wc -l)"
    emit_msg "${file_count} files in the folder."

    if [[ "${file_count}" -eq 0 ]]; then
        echo "File not found. Awaiting before check again..."
    fi
    sleep 3
  done
  emit_msg "File has been found."
}

function create_tmp_folder() {
  mkdir -p /tmp/transfer \
    && chown -R replication:replication /tmp/transfer/
}

function restore_database() {
  run_query "STOP SLAVE;"
  mysql < /tmp/transfer/all.sql
  run_query "START SLAVE;"
}

function setup_replicas() {
  apply_replica_replication_config

  enable_ssh_on_replica

  # Start and await service to be up
  systemctl start mariadb
  until mysqladmin ping; do sleep 1; done

  set_root_user "${mysql_root_password}"

  await_for_backup_file
  restore_database

  # Check if master node is up
  await_for_node "${master_node}"

  # Enable replication on master node
  run_query "
    CHANGE MASTER TO
      master_host='${master_node}',
      master_port=3306,
      master_user='replication_user',
      master_password='${mysql_replication_password}',
      master_use_gtid=current_pos;
    START SLAVE;"
}
