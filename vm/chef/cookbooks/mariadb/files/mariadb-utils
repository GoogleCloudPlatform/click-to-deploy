#!/bin/bash

source /opt/c2d/c2d-utils || exit 1

declare -r replication_user="replication"
declare -r backup_folder="/tmp/transfer"
declare -r backup_filename="${backup_folder}/all-databases.sql"

#######################################
# Prints a formatted message to standard output.
# Arguments:
#  Message string.
#######################################
function emit_msg() {
  echo "$(date +"%I:%M:%S")" "${@}"
}

#######################################
# Run a command on local MariaDB server using root user.
# Arguments:
#  A MariaDB/MySQL command.
#######################################
function run_query() {
  local -r command="$1"
  mysql --user=root -e "${command}"
}

#######################################
# Add short hostnames to /etc/hosts in order to
# avoid error using long hostnames.
# Arguments:
#  Message string.
#######################################
function add_short_hostnames() {
  local -r nodes="$1"
  local target_ip=""
  local target_host=""

  for node in ${nodes}; do
    # target_ip="$(host ${node} | awk -F 'has address' '{ print $2 }' | tr -d ' ')"
    target_ip="$(getent hosts ${node} | awk '{ print $1 }')"
    target_host="$(echo ${node} | grep -o -P "mariadb-vm-(\d*)")"
    echo "${target_ip} ${target_host}" >> /etc/hosts
  done
}

#######################################
# Configure MariaDB to bind service to all available addresses
#######################################
function bind_to_all_addresses() {
  sed -i "s/.*bind-address.*/bind-address = 0.0.0.0/" \
    /etc/mysql/mariadb.conf.d/50-server.cnf
}

#######################################
# Applies the master configuration to a local MariaDB setup.
#######################################
function apply_master_replication_config() {
  local -r config_file="/etc/mysql/conf.d/replication.cnf"
  local -r patch="$(cat patch-replication \
                  | envsubst "\$SERVER_ID \$DATABASE_NAME")"
  echo "${patch}" >> "${config_file}"
}

#######################################
# Create replication users at master node so
# replicas can connect to master.
# Arguments:
#  Replicas list separated by spaces
#  Replication user password
#######################################
function create_replication_users() {
  local -r replicas="$1"
  local -r replication_password="$2"
  local replica_ip=""

  emit_msg "Creating replication users in MariaDB..."

  for replica in ${replicas[@]}; do
    replica_ip="$(getent hosts "${replica}" | awk '{ print $1 }')"
    emit_msg "Creating replication user for node ${replica} on ip ${replica_ip}..."

    # Create user for replication granting access only from replicas hosts
    run_query "
      CREATE USER '${replication_user}'@'${replica_ip}'
      IDENTIFIED BY '${replication_password}';"

    run_query "
      GRANT REPLICATION SLAVE ON *.*
      TO '${replication_user}'@'${replica_ip}';"

      emit_msg "Replication user created."
  done
}

#######################################
# Configure root user authorization.
# Arguments:
#   Root user password.
#   Enable root access from any host or not.
#######################################
function set_root_user() {
  local -r root_password="$1"
  local -r enable_root_anywhere="$2"

  echo "Set root privileges..."
  echo "Enable root from anywhere: ${enable_root_anywhere}"

  # Set root password
  run_query "
    SET PASSWORD FOR 'root'@'localhost' = PASSWORD('${root_password}');
    FLUSH PRIVILEGES;"

  # Grant privilege to root user connect from anywhere
  if [[ "${enable_root_anywhere}" == "True" ]]; then
    run_query "CREATE USER 'root'@'%' IDENTIFIED BY '${root_password}';"
    run_query "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION";
  fi
}

#######################################
# Create backup from all available databases
# and replication information.
#######################################
function create_backup() {
  run_query "CREATE DATABASE ${DATABASE_NAME};"
  mkdir -p "${backup_folder}"
  mysqldump --all-databases --user root --master-data > "${backup_filename}"
}

#######################################
# Await for replicas set up ssh access
# to the replication user
# Arguments:
#  Replicas list separated by spaces.
#######################################
function await_for_replicas_ssh() {
  local -r replicas="$1"

  for replica in ${replicas[@]}; do
    emit_msg "Checking SSH on ${replica}..."
    until ssh -o StrictHostKeyChecking=no ${replication_user}@${replica} -- cat /dev/null; do
      sleep 1
    done
    emit_msg "Connected to ${replica} SSH with success."
  done
}

#######################################
# Send backup via SSH to all replicas available
# Arguments:
#  Replicas list separated by spaces.
#######################################
function send_backup_to_replicas() {
  local -r replicas="$1"

  emit_msg "Sending backup to replicas..."
  for replica in ${replicas[@]}; do
    echo "Sending backup to ${replica}..."
    scp -o StrictHostKeyChecking=no "${backup_filename}" \
      "${replication_user}@${replica}:${backup_folder}"
    echo "Backup sent to ${replica}."
  done
}

#######################################
# Setup a master MariaDB node.
# Arguments:
#   Replicas list separated by spaces.
#   root user password.
#   replication user password.
#   Enable root access from any host or not.
#######################################
function setup_master() {
  local -r replicas="$1"
  local -r root_password="$2"
  local -r replication_password="$3"
  local -r enable_root_anywhere="$4"

  apply_master_replication_config

  # Start and await service to be up
  systemctl start mariadb
  until mysqladmin ping; do sleep 1; done

  create_replication_users "${replicas}" "${replication_password}"
  set_root_user "${root_password}" "${enable_root_anywhere}"

  create_backup
  await_for_replicas_ssh "${replicas}"
  send_backup_to_replicas "${replicas}"

  run_query "UNLOCK TABLES;"
}

#######################################
# Applies the replica configuration to a local MariaDB setup.
#######################################
function apply_replica_replication_config() {
  local -r config_file="/etc/mysql/conf.d/serverid.cnf"

  printf '%s\n' \
    "[mysqld]"   \
    "server-id=${SERVER_ID}"   \
    "replicate-do-db=${DATABASE_NAME}" > "${config_file}"
}

#######################################
# Await if MariaDB service is up at specific node.
# Arguments:
#  Node hostname or IP.
#######################################
function await_for_node() {
  local node="$1"

  emit_msg "Checking if master node is up..."
  timeout --preserve-status 300 bash -c "until echo > /dev/tcp/${node}/3306; do sleep 2; done"
  if [[ "$?" -ne 0 ]]; then
      exit 1
  fi
}

#######################################
# Enable SSH access to replication user without password
# and only from internal master node IP.
#######################################
function enable_ssh_on_replica() {
    # Add replication user and tmp folder
    adduser --disabled-password --gecos "" -u 2001 ${replication_user} \
      && create_tmp_folder

    # Remove password
    sed -i -re "s/^${replication_user}:[^:]+:/${replication_user}::/" \
      /etc/passwd /etc/shadow

    # Configure pam.d
    sed -i '/@include common-auth/r patch-pam-ssh' /etc/pam.d/sshd
    sed -i '/@include common-auth/d' /etc/pam.d/sshd

    # Configure sshd_config
    sed -i-re 's/^PasswordAuthentication no$/# PasswordAuthentication no/g' \
        /etc/ssh/sshd_config
    patch="$(cat patch-ssh | envsubst "\$MASTER_NODE_IP")"
    echo "${patch}" >> /etc/ssh/sshd_config

    systemctl restart ssh
}

#######################################
# Await until backup file is available locally.
#######################################
function await_for_backup_file() {
  local file_count=0

  while [[ "${file_count}" -eq 0 ]]; do
    emit_msg "Checking if backup has been transfered."
    file_count="$(find "${backup_folder}" -maxdepth 1 -not -type d | wc -l)"
    emit_msg "${file_count} backups in the folder."

    if [[ "${file_count}" -eq 0 ]]; then
        emit_msg "Backup not found. Awaiting before checking again..."
    fi
    sleep 3
  done
  emit_msg "Backup has been found."
}

#######################################
# Create temporary folder for receiving backup file
# and grant permission to the replication user.
#######################################
function create_tmp_folder() {
  mkdir -p "${backup_folder}/" \
    && chown -R "${replication_user}:${replication_user}" "${backup_folder}/"
}

#######################################
# Restore replicated database to a local setup.
#######################################
function restore_database() {
  emit_msg "Restoring database..."
  mysql < "${backup_filename}"
}

#######################################
# Set up a replica MariaDB node.
# Arguments:
#   Root user password.
#   Replication user password.
#   Enable root access from any host or not.
#######################################
function setup_replica() {
  local -r root_password="$1"
  local -r replication_password="$2"
  local -r enable_root_anywhere="$3"

  apply_replica_replication_config

  enable_ssh_on_replica

  # Start and await service to be up
  systemctl start mariadb
  until mysqladmin ping; do sleep 1; done

  set_root_user "${root_password}" "${enable_root_anywhere}"

  await_for_backup_file
  restore_database

  # Check if master node is up
  await_for_node "${master_node}"

  # Enable replication on master node
  run_query "
    STOP SLAVE;
    CHANGE MASTER TO
      master_host='${master_node}',
      master_port=3306,
      master_user='${replication_user}',
      master_password='${replication_password}',
      master_use_gtid=current_pos;
    START SLAVE;"
}
