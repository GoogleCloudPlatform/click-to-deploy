#!/bin/bash -eu
#
# Copyright 2023 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source /opt/c2d/c2d-utils || exit 1

readonly postgres_sonar_db="$(get_attribute_value "sonar_db_pass")"
readonly sonar_pass="$(get_attribute_value "sonar_password")"
readonly user="admin"
readonly default_pass="admin"
readonly sonarqube_properties="/opt/sonarqube/conf/sonar.properties"

# Await the application to be ready.
function wait_for_app() {
  local url="$1"
  local target_code="$2"
  local extra_params="$3"
  local max_retries=10
  local retry=1
  local http_code=0

  while [[ "${http_code}" -ne "${target_code}" && "${retry}" -le "${max_retries}" ]]; do
    echo "Trying to fetch homepage... ${retry}"
    http_code="$(curl ${extra_params} -s -L -o /dev/null -w "%{http_code}" ${url})"
    echo "Status: ${http_code}"
    (( retry=retry+1 ))

    sleep 25
  done

  if [[ "${retry}" -gt "${max_retries}" ]]; then
    echo "Max retries exceeded."
    exit 1
  fi
}

# Creating postgres DB for sonar.
sudo -u postgres psql <<EOF
CREATE USER sonar WITH ENCRYPTED PASSWORD '${postgres_sonar_db}';
CREATE DATABASE sonar OWNER sonar;
GRANT ALL PRIVILEGES ON DATABASE sonar TO sonar;
\q
EOF

# Configure SonarQube to run as a sonar user.
sed -i -e 's@#RUN_AS_USER=@RUN_AS_USER=sonar@g' /opt/sonarqube/bin/linux-x86-64/sonar.sh
# Sonarqube default configuration file edits.
sed -i -e 's@#sonar.jdbc.username=@sonar.jdbc.username=sonar@g' "${sonarqube_properties}"
sed -i -e 's@#sonar.jdbc.password=@sonar.jdbc.password='${postgres_sonar_db}'@g' "${sonarqube_properties}"
sed -i -e 's@#sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube?currentSchema=my_schema@sonar.jdbc.url=jdbc:postgresql://localhost/sonar@g' "${sonarqube_properties}"
sed -i -e 's@#sonar.web.javaAdditionalOpts=@sonar.web.javaAdditionalOpts=-server@g' "${sonarqube_properties}"
sed -i -e 's@#sonar.web.host=0.0.0.0@sonar.web.host=0.0.0.0@g' "${sonarqube_properties}"
echo "sonar.search.javaAdditionalOpts=-Dlog4j2.formatMsgNoLookups=true" >> "${sonarqube_properties}"

passwd sonar <<EOF
$sonar_pass
$sonar_pass
EOF

# Hide Sonarqube from end-users while default credentials are still set
sed 's/sonar.web.host=0.0.0.0/sonar.web.host=127.0.0.1/g' -i "${sonarqube_properties}"

# Enable Sonarqube.
systemctl start sonar
systemctl enable sonar

# Wait frontend return 200
wait_for_app "http://localhost" 200 ""

# Ensure admin/admin password.
# https://docs.sonarqube.org/latest/instance-administration/security/
sudo -u sonar psql <<EOF
  update users set
  crypted_password='100000\$t2h8AtNs1AlCHuLobDjHQTn9XppwTIx88UjqUm4s8RsfTuXQHSd/fpFexAnewwPsO6jGFQUv/24DnO55hY6Xew==',
  salt='k9x9eN127/3e/hf38iNiKwVfaVk=',
  hash_method='PBKDF2',
  reset_password='true',
  user_local='true',
  active='true'
  where login='admin';
EOF

# Wait api return 200
wait_for_app "http://localhost:9000/api" 200 "-u ${user}:${default_pass}"

# Actually changes sonarqube user
curl -v \
  --retry 5 \
  --retry-connrefused \
  -s \
  -X POST \
  -u "${user}:${default_pass}" -f "http://localhost:9000/api/users/change_password?login=${user}&password=${sonar_pass}&previousPassword=${default_pass}"

# Re-enable binding to all hosts and restart sonar
sed 's/sonar.web.host=127.0.0.1/sonar.web.host=0.0.0.0/g' -i "${sonarqube_properties}"
systemctl stop sonar
systemctl start sonar

# Wait frontend return 200
wait_for_app "http://localhost" 200 ""

echo "Finished."
