actions:

- name: Wait until Elasticsearch is ready
  bashTest:
    script: |-
      for ((pod=0; pod<${REPLICAS}; pod++)); do
        kubectl wait pod/${APP_INSTANCE_NAME}-elasticsearch-${pod} \
          --namespace=${NAMESPACE} \
          --for=condition=Ready \
          --timeout=180s
      done
    expect:
      exitCode:
        equals: 0

- name: All nodes are connected to the cluster
  bashTest:
    script: |-
      nodes="$(curl -XGET "${HEALTH_URL}?wait_for_nodes=${REPLICAS}&timeout=300s" | jq '.number_of_nodes')"
      if [[ "${nodes}" -eq "${REPLICAS}" ]]; then
        echo 'OK - all nodes found'
      else
        echo "FAIL - found nodes: ${nodes}"
      fi
    expect:
      stdout:
        equals: 'OK - all nodes found'

- name: Cluster reports green status
  bashTest:
    script: |-
      curl -XGET "${HEALTH_URL}?wait_for_status=green&timeout=300s" | jq -r '.status'
    expect:
      stdout:
        equals: 'green'

- name: New document can be saved
  bashTest:
    script: |-
      curl -s -f -X PUT -H 'Content-Type:application/json' -d '{
        "name": "John",
        "surname": "Smith"
      }' "${ELASTIC_URL}/employees/person/1" | jq -r '.result'
    expect:
      exitCode:
        equals: 0
      stdout:
        equals: 'created'

- name: Document can be updated
  bashTest:
    script: |-
      curl -s -f -X POST -H 'Content-Type:application/json' -d '{
        "doc": {
          "lastname": "Jones"
        }
      }' "${ELASTIC_URL}/employees/person/1/_update" | jq -r '.result'
    expect:
      exitCode:
        equals: 0
      stdout:
        equals: 'updated'

- name: Existing document can be found
  bashTest:
    script: |-
      # Wait to allow the object to be propagated between all nodes
      sleep 5
      curl -s -f "${ELASTIC_URL}/_search?q=name:John" | jq -r '.hits.hits[]._source.lastname'
    expect:
      stdout:
        equals: 'Jones'
