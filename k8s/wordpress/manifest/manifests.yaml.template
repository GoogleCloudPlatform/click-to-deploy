---
apiVersion: v1
kind: Secret
metadata:
  name: $APP_INSTANCE_NAME-mysql-secret
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-mysql
type: Opaque
stringData:
  wp_user: "wordpress"
data:
  root_password: "${ROOT_DB_PASSWORD}"
  wp_password: "${WORDPRESS_DB_PASSWORD}"
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: $APP_INSTANCE_NAME-mysql
  labels: &MySQLDeploymentLabels
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MySQLDeploymentLabels
  serviceName: $APP_INSTANCE_NAME-mysql-svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MySQLDeploymentLabels
    spec:
      containers:
      - image: $IMAGE_MYSQL
        name: mysql
        env:
        # A password for root superuser.
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: root_password
        # A database name to be created at startup.
        - name: MYSQL_DATABASE
          value: wordpress
        # A new user to be created at startup.
        - name: MYSQL_USER
          valueFrom:
           secretKeyRef:
             name: $APP_INSTANCE_NAME-mysql-secret
             key: wp_user
        # A password of the new user created at startup.
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: wp_password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: $APP_INSTANCE_NAME-mysql-pvc
          mountPath: /var/lib/mysql
          subPath: data
        readinessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 120
  volumeClaimTemplates:
  - metadata:
      name: $APP_INSTANCE_NAME-mysql-pvc
      labels:
        app.kubernetes.io/name: "$APP_INSTANCE_NAME"
        app.kubernetes.io/component: wordpress-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_INSTANCE_NAME-mysql-svc
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: wordpress-mysql
  clusterIP: None
---
apiVersion: v1
kind: Secret
metadata:
  name: $APP_INSTANCE_NAME-wordpress-secret
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
type: Opaque
stringData:
  wp_user: "${WORDPRESS_ADMIN_NAME}"
data:
  wp_password: "${WORDPRESS_ADMIN_PASSWORD}"
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: $APP_INSTANCE_NAME-wordpress
  labels: &WordPressDeploymentLabels
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
spec:
  replicas: 1
  serviceName: $APP_INSTANCE_NAME-wordpress-svc
  selector:
    matchLabels: *WordPressDeploymentLabels
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *WordPressDeploymentLabels
    spec:
      initContainers:
      - name: allow-health-probe-before-configuration
        image: $IMAGE_WORDPRESS
        command:
        - "/bin/bash"
        - "-c"
        - |
          wpadm=/var/www/html/wp-admin/
          if [[ -d ${wpadm} ]]; then
            exit
          fi
          mkdir -m755 ${wpadm}
          chown www-data:www-data ${wpadm}
          cat <<EOF > ${wpadm}/.htaccess
          <If "%{HTTP_USER_AGENT} =~ /^(kube-probe|GoogleHC)/ && %{HTTP:X-Forwarded-For} =~ /^$/">
            Require all granted
            DirectoryIndex /wp-admin/install.php
          </If>
          EOF
        volumeMounts:
        - name: $APP_INSTANCE_NAME-wordpress-pvc
          mountPath: /var/www/html
          subPath: wp
      containers:
      - image: $IMAGE_WORDPRESS
        name: wordpress
        env:
        # A WordPress' username
        - name: WORDPRESS_ADMIN_NAME
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-wordpress-secret
              key: wp_user
          # A WordPress' password
        - name: WORDPRESS_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-wordpress-secret
              key: wp_password
        # A hostname and port of MySQL service.
        - name: WORDPRESS_DB_HOST
          value: $APP_INSTANCE_NAME-mysql-svc
        # A username used for accessing the database.
        - name: WORDPRESS_DB_USER
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: wp_user
        # A password used for accessing the database.
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-mysql-secret
              key: wp_password
        # A database name used by WordPress.
        - name: WORDPRESS_DB_NAME
          value: wordpress
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: $APP_INSTANCE_NAME-wordpress-pvc
          mountPath: /var/www/html
          subPath: wp
        lifecycle:
          postStart:
            exec:
              command:
              - "/bin/bash"
              - "-euc"
              - |
                # Please do not remove --fail argument.

                curl --fail --retry 5 --retry-delay 5 --retry-connrefused \
                  -X POST "http://localhost/wp-admin/install.php?step=2" \
                  -F "weblog_title=WordPress on Google Kubernetes Engine" \
                  -F "user_name=${WORDPRESS_ADMIN_NAME}" \
                  -F "admin_password=${WORDPRESS_ADMIN_PASSWORD}" \
                  -F "pass1-text=${WORDPRESS_ADMIN_PASSWORD}" \
                  -F "admin_password2=${WORDPRESS_ADMIN_PASSWORD}" \
                  -F "pw_weak=on" \
                  -F "admin_email=noreply@google.com" \
                  -F "blog_public=0" \
                  -F "Submit=Install+WordPress" \
                  -F "language=en"
        readinessProbe:
          httpGet:
            path: /wp-admin/install.php
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 2
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 120
  volumeClaimTemplates:
  - metadata:
      name: $APP_INSTANCE_NAME-wordpress-pvc
      labels:
        app.kubernetes.io/name: "$APP_INSTANCE_NAME"
        app.kubernetes.io/component: wordpress-webserver
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_INSTANCE_NAME-wordpress-svc
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  selector:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: wordpress-webserver
  type: ClusterIP
