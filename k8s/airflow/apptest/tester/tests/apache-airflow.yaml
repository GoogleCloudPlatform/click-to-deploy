actions:
- name: kubectl smoke test
  bashTest:
    script: kubectl version
    expect:
      exitCode:
        equals: 0
- name: Create test DAG
  bashTest:
    script: |
      cat > /tmp/testdag.py <<'EOF'
      from __future__ import annotations
      import datetime
      import pendulum
      from airflow import DAG
      from airflow.operators.bash import BashOperator     
      with DAG(
          dag_id="testdag",
          schedule=None,
          start_date=pendulum.datetime(2021, 1, 1, tz="UTC"),
          catchup=False,
          dagrun_timeout=datetime.timedelta(minutes=60),
      ) as dag:
          print_task = BashOperator(
              task_id="print_task",
              bash_command="echo test passed",
          )
          print_task
      EOF
    expect:
      exitCode:
        equals: 0
- name: Wait for the webserver get ready
  bashTest:
    script: kubectl wait --for=condition=Available=True --timeout=120s --namespace $NAMESPACE deploy "${APP_INSTANCE_NAME}-web"
    expect:
      exitCode:
        equals: 0
- name: Try to run test DAG
  bashTest:
    script: |
      export AIRFLOW_PODNAME=$(kubectl get pod --namespace $NAMESPACE -l component=web -o jsonpath={..metadata.name})
      kubectl cp /tmp/testdag.py ${AIRFLOW_PODNAME}:/opt/airflow/dags/testdag.py -c airflow-web --namespace $NAMESPACE
      kubectl exec ${AIRFLOW_PODNAME} -c airflow-web --namespace $NAMESPACE -- airflow dags test testdag | grep -c "test passed"
    expect:
      stdout:
        matches: "2"
- name: Scale down airflow
  bashTest:
    script: |
      kubectl scale deploy --replicas=0 $APP_INSTANCE_NAME-web $APP_INSTANCE_NAME-scheduler $APP_INSTANCE_NAME-triggerer $APP_INSTANCE_NAME-db-migrations -n $NAMESPACE
      kubectl wait --for delete pod -l 'component in (web, scheduler, triggerer, db-migrations)' -n $NAMESPACE
      kubectl scale deploy --replicas=0 $APP_INSTANCE_NAME-nfs-server -n $NAMESPACE
    expect:
      exitCode:
        equals: 0
