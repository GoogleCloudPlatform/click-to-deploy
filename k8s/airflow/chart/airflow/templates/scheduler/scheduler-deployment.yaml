apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-scheduler
  labels:
    app: {{ include "airflow.labels.app" . }}
    component: scheduler
    chart: {{ include "airflow.labels.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.scheduler.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ include "airflow.labels.app" . }}
      component: scheduler
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/secret-config-envs: {{ include (print $.Template.BasePath "/config/secret-config-envs.yaml") . | sha256sum }}
        checksum/secret-local-settings: {{ include (print $.Template.BasePath "/config/secret-local-settings.yaml") . | sha256sum }}
        checksum/config-pod-template: {{ include (print $.Template.BasePath "/config/configmap-pod-template.yaml") . | sha256sum }}
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        app: {{ include "airflow.labels.app" . }}
        component: scheduler
        release: {{ .Release.Name }}
    spec:
      restartPolicy: Always
      serviceAccountName: {{ include "airflow.serviceAccountName" . }}
      initContainers:
        {{- if .Values.dags.gitSync.enabled }}
        {{- include "airflow.container.git_sync" (dict "Release" .Release "Values" .Values "sync_one_time" "true") | indent 8 }}
        {{- end }}
        {{- include "airflow.init_container.check_db" (dict "Release" .Release "Values" .Values "volumeMounts" $volumeMounts) | indent 8 }}
        {{- include "airflow.init_container.wait_for_db_migrations" (dict "Release" .Release "Values" .Values "volumeMounts" $volumeMounts) | indent 8 }}
      containers:
        - name: airflow-scheduler
          {{- include "airflow.image" . | indent 10 }}
          resources:
            {{- toYaml .Values.scheduler.resources | nindent 12 }}
          envFrom:
            {{- include "airflow.envFrom" . | indent 12 }}
          env:
            {{- include "airflow.env" . | indent 12 }}
          command:
            {{- include "airflow.command" . | indent 12 }}
          args:
            - "bash"
            - "-c"
            - "exec airflow scheduler -n {{ .Values.scheduler.numRuns }}"
          {{- if .Values.scheduler.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.scheduler.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.scheduler.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.scheduler.livenessProbe.failureThreshold }}
            timeoutSeconds: {{ .Values.scheduler.livenessProbe.timeoutSeconds }}
            exec:
              command:
                {{- include "airflow.command" . | indent 16 }}
                - "python"
                - "-Wignore"
                - "-c"
                - |
                  import os
                  import sys

                  os.environ["AIRFLOW__LOGGING__LOGGING_LEVEL"] = "ERROR"

                  from airflow.jobs.scheduler_job import SchedulerJob
                  from airflow.utils.db import create_session
                  from airflow.utils.net import get_hostname
                  {{- if .Values.scheduler.livenessProbe.taskCreationCheck.enabled }}
                  from airflow.jobs.local_task_job import LocalTaskJob
                  from airflow.utils import timezone
                  {{- end }}

                  with create_session() as session:
                      # ensure the SchedulerJob with most recent heartbeat for this `hostname` is alive
                      hostname = get_hostname()
                      scheduler_job = session \
                          .query(SchedulerJob) \
                          .filter_by(hostname=hostname) \
                          .order_by(SchedulerJob.latest_heartbeat.desc()) \
                          .limit(1) \
                          .first()
                      if (scheduler_job is not None) and scheduler_job.is_alive():
                          pass
                      else:
                          sys.exit(f"The SchedulerJob (id={scheduler_job.id}) for hostname '{hostname}' is not alive")

                      {{- if .Values.scheduler.livenessProbe.taskCreationCheck.enabled }}
                      {{- $task_job_threshold := .Values.scheduler.livenessProbe.taskCreationCheck.thresholdSeconds }}
                      {{- if not (or (typeIs "float64" $task_job_threshold) (typeIs "int64" $task_job_threshold)) }}
                      {{- /* the type of a number could be float64 or int64 depending on how it was set (values.yaml, or --set) */ -}}
                      {{ required (printf "`scheduler.livenessProbe.taskCreationCheck.thresholdSeconds` must be int-type, but got %s!" (typeOf $task_job_threshold)) nil }}
                      {{- end }}

                      # ensure the most recent LocalTaskJob had a start_date in the last `task_job_threshold` seconds
                      task_job_threshold = {{ $task_job_threshold }}
                      task_job = session \
                          .query(LocalTaskJob) \
                          .order_by(LocalTaskJob.id.desc()) \
                          .limit(1) \
                          .first()
                      if task_job is not None:
                          if (timezone.utcnow() - task_job.start_date).total_seconds() < task_job_threshold:
                              pass
                          else:
                              sys.exit(
                                  f"The most recent LocalTaskJob (id={task_job.id}, dag_id={task_job.dag_id}) "
                                  f"started over {task_job_threshold} seconds ago"
                              )
                      {{- end }}
          {{- end }}
          volumeMounts:
            {{- include "airflow.volumeMounts" . | indent 12 }}
            - name: pod-template
              mountPath: /opt/airflow/pod_templates/pod_template.yaml
              subPath: pod_template.yaml
              readOnly: true
        {{- if .Values.dags.gitSync.enabled }}
        {{- include "airflow.container.git_sync" . | indent 8 }}
        {{- end }}
        {{- include "airflow.container.log_cleanup" . | indent 8 }}
      volumes:
        {{- include "airflow.volumes" . | indent 8 }}
        - name: pod-template
          configMap:
            name: {{ .Release.Name }}-pod-template
