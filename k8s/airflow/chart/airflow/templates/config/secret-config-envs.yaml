---
{{- $secret := (lookup "v1" "Secret" .Release.Namespace (printf "%s-config-envs" .Release.Name) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-config-envs
  labels:
    app: {{ include "airflow.labels.app" . }}
    chart: {{ include "airflow.labels.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
## we must use `data` rather than `stringData` (see: https://github.com/helm/helm/issues/10010)
data:
  ## ================
  ## Linux Configs
  ## ================
  TZ: {{ "Etc/UTC" | b64enc | quote }}

  ## ================
  ## Database Configs
  ## ================
  ## database host/port

  DATABASE_PORT: {{ "5432" | b64enc | quote }}
  DATABASE_DB: {{ "airflow" | b64enc | quote }}
  DATABASE_USER: {{ "postgres" | b64enc | quote }}
  {{- if $secret }}
  DATABASE_PASSWORD: {{ $secret.data.DATABASE_PASSWORD }}
  {{- else }}
  DATABASE_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}

  DATABASE_USER_CMD: {{ `echo "${DATABASE_USER}" | python3 -c "import urllib.parse; encoded_user = urllib.parse.quote(input()); print(encoded_user)"` | b64enc | quote }}

  DATABASE_PASSWORD_CMD: {{ `echo "${DATABASE_PASSWORD}" | python3 -c "import urllib.parse; encoded_pass = urllib.parse.quote(input()); print(encoded_pass)"` | b64enc | quote }}
  DATABASE_SQLALCHEMY_CMD: {{ `echo -n "postgresql+psycopg2://$(eval $DATABASE_USER_CMD):$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}"` | b64enc | quote }}
  DATABASE_CELERY_CMD: {{ `echo -n "db+postgresql://$(eval $DATABASE_USER_CMD):$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}"` | b64enc | quote }}
  DATABASE_PSQL_CMD: {{ `echo -n "postgresql://$(eval $DATABASE_USER_CMD):$(eval $DATABASE_PASSWORD_CMD)@${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DB}${DATABASE_PROPERTIES}"` | b64enc | quote }}

  ## ================
  ## Airflow Configs (General)
  ## ================
  AIRFLOW__CORE__DAGS_FOLDER: {{ include "airflow.dags.path" . | b64enc | quote }}
  AIRFLOW__CORE__EXECUTOR: "KubernetesExecutor"

  AIRFLOW__CORE__SQL_ALCHEMY_CONN_CMD: {{ `bash -c 'eval "$DATABASE_SQLALCHEMY_CMD"'` | b64enc | quote }}
  {{- if $secret }}
  AIRFLOW__WEBSERVER__SECRET_KEY: {{ $secret.data.AIRFLOW__WEBSERVER__SECRET_KEY }}
  {{- else }}
  AIRFLOW__WEBSERVER__SECRET_KEY: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}

  AIRFLOW__WEBSERVER__WEB_SERVER_PORT: {{ "8080" | b64enc | quote }}
  AIRFLOW__WEBSERVER__BASE_URL: {{ .Values.web.webserverBaseUrl | toString | b64enc | quote }}
  {{- if and (.Values.dags.gitSync.enabled) (not .Values.airflow.config.AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL) }}
  ## refresh the dags folder at the same frequency as git-sync
  AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: {{ .Values.dags.gitSync.syncWait | toString | b64enc | quote }}
  {{- end }}


  AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: {{ "1000" | b64enc | quote }}

  ## ================
  ## Airflow Configs (Logging)
  ## ================
  AIRFLOW__LOGGING__BASE_LOG_FOLDER: {{ .Values.logs.path | toString | b64enc | quote }}
  AIRFLOW__LOGGING__DAG_PROCESSOR_MANAGER_LOG_LOCATION: {{ printf "%s/dag_processor_manager/dag_processor_manager.log" .Values.logs.path | b64enc | quote }}
  AIRFLOW__SCHEDULER__CHILD_PROCESS_LOG_DIRECTORY: {{ printf "%s/scheduler" .Values.logs.path | b64enc | quote }}

  ## ================
  ## Airflow Configs (Kubernetes)
  ## ================
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__NAMESPACE }}
  AIRFLOW__KUBERNETES__NAMESPACE: {{ .Release.Namespace | toString | b64enc | quote }}
  {{- end }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY }}
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_REPOSITORY: {{ .Values.airflow.image.repository | toString | b64enc | quote }}
  {{- end }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG }}
  AIRFLOW__KUBERNETES__WORKER_CONTAINER_TAG: {{ .Values.airflow.image.tag | toString | b64enc | quote }}
  {{- end }}
  {{- if not .Values.airflow.config.AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE }}
  AIRFLOW__KUBERNETES__POD_TEMPLATE_FILE: {{ "/opt/airflow/pod_templates/pod_template.yaml" | b64enc | quote }}
  {{- end }}

