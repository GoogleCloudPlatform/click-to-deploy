{{- /* if remote_logging has been enabled by the user */ -}}
{{- $remote_logging_enabled := false }}
{{- $remote_logging_envvars := list "AIRFLOW__CORE__REMOTE_LOGGING" "AIRFLOW__LOGGING__REMOTE_LOGGING" }}
{{- range $env := .Values.airflow.extraEnv }}
  {{- if has $env.name $remote_logging_envvars }}
  {{- $remote_logging_enabled = true }}
  {{- end }}
{{- end }}

{{- /* if we show the extraPipPackages warning */ -}}
{{- $extra_pip_warning := false }}
{{- if .Values.airflow.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.airflow.kubernetesPodTemplate.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.scheduler.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- else if .Values.web.extraPipPackages }}
{{- $extra_pip_warning = true }}
{{- end }}

{{- /* if we show the embedded postgres warning */ -}}
{{- $embedded_postgres_warning := false }}
{{- if .Values.postgresql.enabled }}
{{- $embedded_postgres_warning = true }}
{{- end }}

{{- /* if we show the git-sync known_hosts warning */ -}}
{{- $known_host_warning := false }}
{{- if and (.Values.dags.gitSync.enabled) (.Values.dags.gitSync.sshSecret) (not .Values.dags.gitSync.sshKnownHosts) }}
{{- $known_host_warning = true }}
{{- end }}

{{- /* if we show the scheduler livenessProbe warning */ -}}
{{- $scheduler_livenessProbe_warning := false }}
{{- if not .Values.scheduler.livenessProbe.enabled }}
{{- $scheduler_livenessProbe_warning = true }}
{{- end }}

{{- /* if we show the scheduler livenessProbe taskCreationCheck warning */ -}}
{{- $scheduler_livenessProbe_taskCreationCheck_warning := false }}
{{- if and (.Values.scheduler.livenessProbe.enabled) (not .Values.scheduler.livenessProbe.taskCreationCheck.enabled) }}
{{- $scheduler_livenessProbe_taskCreationCheck_warning = true }}
{{- end }}

========================================================================
Thanks for deploying Apache Airflow with the User-Community Helm Chart!

====================
        TIPS
====================
{{- range $user := .Values.airflow.users }}
{{- if and (eq $user.username "admin") (eq $user.password "admin") }}
Default Airflow Webserver login:
  * Username:  admin
  * Password:  admin
{{- end }}
{{ end }}

{{- if and (not .Values.ingress.enabled) (eq .Values.web.service.type "ClusterIP") }}
It looks like you have NOT exposed the Airflow Webserver, do this by:
  1. Using a Kubernetes Ingress with `ingress.*`
  2. Using a Kubernetes LoadBalancer/NodePort type Service with `web.service.type`
{{ end }}

{{- if .Values.ingress.enabled }}
Your Kubernetes Ingress endpoint URLs:
  * Airflow Webserver:  http{{ if .Values.ingress.web.tls.enabled }}s{{ end }}://{{ .Values.ingress.web.host }}{{ .Values.ingress.web.path }}/
{{ end }}

{{- if eq .Values.web.service.type "LoadBalancer" }}
You deployed a "LoadBalancer" type Service for the Airflow Webserver:
  * External IP:    kubectl get svc/{{ .Release.Name }}-web --namespace {{ .Release.Namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
  * External Port:  {{ .Values.web.service.externalPort }}
  * NOTE:           it may take a few minutes for the External IP to be provisioned by your cloud provider
{{ end }}

{{- if eq .Values.web.service.type "NodePort" }}
You deployed a "NodePort" type Service for the Airflow Webserver:
  * Node IP:    kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}"
  * Node Port:  kubectl get svc/{{ .Release.Name }}-web --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}"
  * NOTE:       any Node's external IP will work
{{ end }}

{{- if true }}
Use these commands to port-forward the Services to your localhost:
  * Airflow Webserver:  kubectl port-forward svc/{{ .Release.Name }}-web 8080:8080 --namespace {{ .Release.Namespace }}
{{ end }}

{{- if or ($extra_pip_warning) ($embedded_postgres_warning) ($known_host_warning) }}
====================
      WARNINGS
====================

{{- if $extra_pip_warning }}
[HIGH] using `extraPipPackages` can cause unexpected runtime errors if external PyPi packages change between Pod restarts
  * HELP: create a Docker image with your pip packages installed and use it with `airflow.image.*`
{{ end }}

{{- if $embedded_postgres_warning }}
[HIGH] using the embedded postgres database is NOT suitable for production!
  * HELP: use an external postgres/mysql database with `externalDatabase.*`
{{ end }}

{{- if $known_host_warning }}
[HIGH] git-sync ssh known_hosts verification is disabled!
  * HELP: set `dags.gitSync.sshKnownHosts` with the ssh fingerprint of your git host
{{ end }}

{{- if $scheduler_livenessProbe_warning }}
[MEDIUM] the scheduler liveness probe is disabled, the scheduler may not be restarted if it becomes unhealthy!
  * HELP: enable the probe with `scheduler.livenessProbe.enabled`
{{ end }}

{{- if $scheduler_livenessProbe_taskCreationCheck_warning }}
[MEDIUM] the scheduler "task creation check" is disabled, the scheduler may not be restarted if it deadlocks!
  * HELP: configure the check with `scheduler.livenessProbe.taskCreationCheck.*`
{{ end }}

{{- end }}
========================================================================
