{{- if .Values.metrics.enabled }}
apiVersion: "v1"
kind: "Service"
metadata:
  name: {{ .Release.Name }}-kafka-exporter
  labels: &KafkaDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: kafka-exporter
spec:
  type: "ClusterIP"
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 9308
      name: "kafka-client"
  selector: *KafkaDeploymentLabels
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-kafka-exporter
  labels: &KafkaDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: kafka-exporter
spec:
  selector:
    matchLabels: *KafkaDeploymentLabels
  replicas: 1
  revisionHistoryLimit: 1
  template:
    metadata:
      labels: *KafkaDeploymentLabels
    spec:
      affinity:
        null
      containers:
        - name: exporter
          image: "{{ .Values.exporter.image }}"
          imagePullPolicy: IfNotPresent
          resources:
            {}
          ports:
            - containerPort: 9308
              name: kafka-client
          command:
            - bash
            - -c
            - |
                kafka_exporter \
          {{- if not .Values.kafka.standalone}}
                --sasl.username=$K_USER \
                --sasl.password=$K_PASSWORD \
                --sasl.enabled \
                --sasl.mechanism=plain \
          {{- end }}
                --kafka.server={{ .Release.Name }}-kafka-client:9092
          {{- if not .Values.kafka.standalone}}
          env:
          - name: K_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-kafka-secrets
                key: kafka_user
          - name: K_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-kafka-secrets
                key: kafka_password
        {{- end }}
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 10
            httpGet:
              path: "/metrics"
              port: 9308
          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 5
            httpGet:
              path: "/metrics"
              port: 9308
        {{- if .Values.metrics.exporter.enabled }}
        - name: prometheus-to-sd
          image: {{ .Values.metrics.image }}
          command:
          - /monitor
          - --stackdriver-prefix=custom.googleapis.com
          - --source=kafka:http://localhost:9308/metrics
          - --pod-id=$(POD_NAME)
          - --namespace-id=$(POD_NAMESPACE)
          - --monitored-resource-types=k8s
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        {{- end }}

      initContainers:
        - name: check-kafka-brokers
          image: {{ .Values.deployer.image }}
          imagePullPolicy: IfNotPresent
          command:
            - 'sh'
            - '-c'
            - |

        {{- if (not .Values.kafka.standalone)}}
              REPLICAS={{ .Values.kafka.replicas}}
        {{- else }}
              REPLICAS=1
        {{- end }}
              COUNTER=0;
              while [  $COUNTER -lt 30 ]; do
                echo dump | nc {{ .Release.Name }}-zk-client 2181 | grep brokers | wc -l | grep $REPLICAS && exit 0;
                let COUNTER=COUNTER+1;
                sleep 1
              done;
              echo "Did NOT see all Kafka broker instances alive after 30 secs!";
              exit 1;

{{- end }}
