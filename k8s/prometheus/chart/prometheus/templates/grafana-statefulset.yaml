---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-grafana
  labels: &Labels
    k8s-app: grafana
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: grafana
spec:
  serviceName: {{ .Release.Name }}-grafana
  replicas: 1
  selector:
    matchLabels: *Labels
  template:
    metadata:
      labels: *Labels
    spec:
      serviceAccountName: "{{ .Values.grafana.serviceAccountName }}"
      initContainers:
          - name: "init-chmod-data"
            image: "{{ .Values.prometheus.initContainer.image }}"
            imagePullPolicy: "IfNotPresent"
            command: ["chmod", "777", "/var/lib/grafana"]
            volumeMounts:
            - name: {{ .Release.Name }}-grafana-data
              mountPath: "/var/lib/grafana"
      containers:
        - name: grafana
          image: "{{ .Values.grafana.image }}"
          imagePullPolicy: Always
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/"
            - name: dashboards
              mountPath: "/var/lib/grafana/dashboards"
            - name: datasources
              mountPath: "/etc/grafana/provisioning/datasources/"
            - name: dashboardproviders
              mountPath: "/etc/grafana/provisioning/dashboards/"
            - name: {{ .Release.Name }}-grafana-data
              mountPath: "/var/lib/grafana"
          ports:
            - name: service
              containerPort: 80
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-grafana
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-grafana
                  key: admin-password
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 9
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: 50m
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 100Mi
      volumes:
        - name: config
          configMap:
            name: {{ .Release.Name }}-grafana-ini
        - name: datasources
          configMap:
            name: {{ .Release.Name }}-grafana-datasources
        - name: dashboardproviders
          configMap:
            name: {{ .Release.Name }}-grafana-dashboardproviders
        - name: dashboards
          configMap:
            name: {{ .Release.Name }}-dashboards
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-grafana-data
    spec:
      storageClassName: "{{ .Values.prometheus.storageClass }}"
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "2Gi"
