actions:

- name: Retrieve a organization
  bashTest:
    script: |-
      # Retrieve org_id
      curl -s --request GET "${APP_INSTANCE_NAME}-influxdb-svc:8086/api/v2/orgs" \
         --header "Authorization: Token ${INFLUXDB_API_TOKEN}" > /tmp/orgs.json

      # Output the Organization name
      jq -r '.orgs[0].name' /tmp/orgs.json
    expect:
      stdout:
        contains: 'example_org'
      exitCode:
        equals: 0

- name: Can create a new bucket
  bashTest:
    script: |-
      # Retrieve org_id retrieved on step 1
      org_id="$(jq -r '.orgs[0].id' /tmp/orgs.json)"

      jq -r --null-input --arg org_id "${org_id}" '{
            "name": "c2d_bucket",
            "description": "A bucket holding c2d tests",
            "orgID": $org_id,
            "retentionRules": [
                {
                    "type": "expire",
                    "everySeconds": 2592000
                }
            ]
          }' > /tmp/new_org_request.json

      curl -v --request POST "http://${APP_INSTANCE_NAME}-influxdb-svc:8086/api/v2/buckets" \
        --header "Authorization: Token ${INFLUXDB_API_TOKEN}" \
        --header "Accept: application/json" \
        --header "Content-Type: application/json" \
        --data "$(cat /tmp/new_org_request.json)" 2>&1
    expect:
      stdout:
        contains: 'HTTP/1.1 201 Created'
      exitCode:
        equals: 0

- name: Write data
  bashTest:
    script: |-
      # Retrieve org_id retrieved on step 1
      org_id="$(jq -r '.orgs[0].id' /tmp/orgs.json)"

      # Generate current timestamp
      current_ts="$(date +%s)"

      # Write data to the bucket
      curl -v --request POST \
        "${APP_INSTANCE_NAME}-influxdb-svc:8086/api/v2/write?org=${org_id}&bucket=c2d_bucket&precision=s" \
          --header "Authorization: Token ${INFLUXDB_API_TOKEN}" \
          --header "Content-Type: text/plain; charset=utf-8" \
          --header "Accept: application/json" \
          --data-binary "
              home,room=Living\ Room temp=21.1,hum=35.9,co=0i ${current_ts}
              home,room=Kitchen temp=21.0,hum=35.9,co=0i ${current_ts}
            " 2>&1
    expect:
      stdout:
        contains: 'HTTP/1.1 204 No Content'
      exitCode:
        equals: 0

- name: Query data
  bashTest:
    script: |-
      # Retrieve org_id retrieved on step 1
      org_id="$(jq -r '.orgs[0].id' /tmp/orgs.json)"

      # Read data from bucket
      curl -s --request POST "${APP_INSTANCE_NAME}-influxdb-svc:8086/api/v2/query?org=${org_id}" \
        --header "Content-Type: application/vnd.flux" \
        --header "Accept: application/csv" \
        --header "Authorization: Token ${INFLUXDB_API_TOKEN}" \
        --data 'from(bucket: "c2d_bucket")
                  |> range(start: -10m)' | grep "Kitchen" | wc -l

    expect:
      stdout:
        contains: '3'
      exitCode:
        equals: 0

- name: Is InfluxDB instance up and running
  httpTest:
    url: http://{{ .Env.APP_INSTANCE_NAME }}-influxdb-svc:8086/ping
    expect:
      statusCode:
        equals: 204

- name: Is InfluxDB /metrics HTTP endpoint working
  bashTest:
    script: curl -f "http://${APP_INSTANCE_NAME}-influxdb-svc:8086/metrics"
    expect:
      stdout:
        contains: 'influxdb_users_total 1'
      exitCode:
        equals: 0
