---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-mysql
  labels: &MySQLDeploymentLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: mediawiki-mysql
spec:
  replicas: 1
  selector:
    matchLabels: *MySQLDeploymentLabels
  serviceName: {{ .Release.Name }}-mysql-svc
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MySQLDeploymentLabels
    spec:
      containers:
      - image: {{ .Values.db.image }}
        name: mysql
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        env:
        # A password for root superuser.
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: root-password
        # A database name to be created at startup.
        - name: MYSQL_DATABASE
          value: "{{ .Values.db.name }}"
        # A new user to be created at startup.
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: mediawiki-username
        # A password of the new user created at startup.
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysql-secret
              key: mediawiki-password
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: {{ .Release.Name }}-mysql-pvc
          mountPath: /var/lib/mysql
          subPath: "{{ .Values.db.name}}"
        - name: mysql-config
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        readinessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 15
        livenessProbe:
          exec:
            command: ["sh", "-c", "exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD"]
          initialDelaySeconds: 120
      - image: {{ .Values.db.exporter.image }}
        name: mysqld-exporter
        env:
        - name: MYSQLD_EXPORTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mysqld-exporter-secret
              key: mysqld-exporter-pass
        - name: DATA_SOURCE_NAME
          value: {{ .Values.db.exporter.username }}:$(MYSQLD_EXPORTER_PASSWORD)@(127.0.0.1:3306)/
        ports:
        - name: exporter
          containerPort: 9104
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9104
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9104
          initialDelaySeconds: 60
          timeoutSeconds: 30
          failureThreshold: 10
          periodSeconds: 10
      {{- if .Values.metrics.exporter.enabled }}
      - name: prometheus-to-sd
        image: {{ .Values.metrics.image }}
        command:
        - /monitor
        - --stackdriver-prefix=custom.googleapis.com
        - --source=mysql:http://localhost:9104/metrics
        - --pod-id=$(POD_NAME)
        - --namespace-id=$(POD_NAMESPACE)
        - --monitored-resource-types=k8s
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{- end }}
      volumes:
      - name: mysql-config
        secret:
          secretName: {{ .Release.Name }}-mysqld-exporter-secret
          items:
          - key: mysqld_exporter.sql
            path: mysqld_exporter.sql
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-mysql-pvc
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}"
        app.kubernetes.io/component: mediawiki-server
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.mediawiki.persistence.storageClass }}
      resources:
        requests:
          storage: "{{ .Values.db.persistence.size }}"
