apiVersion: v1
kind: ConfigMap
metadata:
  name: $APP_INSTANCE_NAME-kibana-configmap
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: kibana-server
data:
  index-logstash.json: |-
    {
      "attributes": {
        "title": "logstash-*",
        "timeFieldName": "@timestamp"
      }
    }
  search-gke-apps.json: |-
    {
      "attributes": {
        "title": "GKE Apps logs",
        "description": "",
        "hits": 0,
        "columns": [
          "kubernetes.labels.app_kubernetes_io/name",
          "kubernetes.namespace_name",
          "kubernetes.pod_name",
          "kubernetes.container_name",
          "log"
        ],
        "sort": [
          "@timestamp",
          "desc"
        ],
        "version": 1,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"index\":\"logstash-*\",\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"kubernetes.labels.app_kubernetes_io/name:*\",\"language\":\"kuery\"},\"filter\":[]}"
        }
      }
    }
  search-kubelet.json: |-
    {
      "attributes": {
        "title": "kubelet logs",
        "description": "",
        "hits": 0,
        "columns": [
          "hostname",
          "log"
        ],
        "sort": [
          "@timestamp",
          "desc"
        ],
        "version": 1,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"index\":\"logstash-*\",\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"systemd_unit:\\\"kubelet.service\\\"\",\"language\":\"kuery\"},\"filter\":[]}"
        }
      }
    }
  search-kube-proxy.json: |-
    {
      "attributes": {
        "title": "kube-proxy logs",
        "description": "",
        "hits": 0,
        "columns": [
          "hostname",
          "log"
        ],
        "sort": [
          "@timestamp",
          "desc"
        ],
        "version": 1,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"index\":\"logstash-*\",\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"tag:\\\"kubeproxy\\\"\",\"language\":\"kuery\"},\"filter\":[]}"
        }
      }
    }
  search-docker.json: |-
    {
      "attributes": {
        "title": "docker logs",
        "description": "",
        "hits": 0,
        "columns": [
          "hostname",
          "log"
        ],
        "sort": [
          "@timestamp",
          "desc"
        ],
        "version": 1,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"index\":\"logstash-*\",\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"systemd_unit:\\\"docker.service\\\"\",\"language\":\"kuery\"},\"filter\":[]}"
        }
      }
    }
  search-kernel.json: |-
    {
      "attributes": {
        "title": "kernel logs",
        "description": "",
        "hits": 0,
        "columns": [
          "hostname",
          "log"
        ],
        "sort": [
          "@timestamp",
          "desc"
        ],
        "version": 1,
        "kibanaSavedObjectMeta": {
          "searchSourceJSON": "{\"index\":\"logstash-*\",\"highlightAll\":true,\"version\":true,\"query\":{\"query\":\"transport:\\\"kernel\\\"\",\"language\":\"kuery\"},\"filter\":[]}"
        }
      }
    }
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: $APP_INSTANCE_NAME-kibana
  labels: &KibanaDeploymentLabels
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: kibana-server
spec:
  selector:
    matchLabels: *KibanaDeploymentLabels
  replicas: 1
  template:
    metadata:
      labels: *KibanaDeploymentLabels
    spec:
      containers:
      - name: kibana
        image: $IMAGE_KIBANA
        imagePullPolicy: Always
        env:
        - name: ELASTICSEARCH_URL
          value: "http://$APP_INSTANCE_NAME-elasticsearch-svc:9200"
        - name: KIBANA_DEFAULTAPPID
          value: "discover"
        ports:
        - name: http
          containerPort: 5601
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 5
---
apiVersion: batch/v1
kind: Job
metadata:
  name: $APP_INSTANCE_NAME-kibana-init-job
  labels: &KibanaInitJobLabels
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: kibana-server-init
spec:
  template:
    metadata:
      labels: *KibanaInitJobLabels
    spec:
      initContainers:
      - name: kibana-waiter
        image: $IMAGE_INIT
        command: ['/bin/bash', '-c']
        args:
        - |
          kibana_url="http://${APP_INSTANCE_NAME}-kibana-svc:5601"
          apt-get update && apt-get install -y jq
          echo "Waiting for Kibana..."
          # Wait for Kibana API:
          until curl --silent --max-time 5 \
            ${kibana_url}/api/status \
            | jq '.status.overall.state' \
            | grep "green" > /dev/null; do
            echo "Waiting for Kibana..."
            sleep 5
          done
          echo "Kibana available."
      containers:
      - name: kibana-init
        image: $IMAGE_INIT
        command: ['/bin/bash', '-c']
        args: 
        - |
          kibana_url="http://${APP_INSTANCE_NAME}-kibana-svc:5601"
          index_pattern_id="logstash-*"

          set -e

          # Create index pattern to catch 'logstash-*':
          curl --fail -XPOST --retry 5 \
            -H "Content-Type: application/json" -H "kbn-xsrf: anything" \
            "${kibana_url}/api/saved_objects/index-pattern/${index_pattern_id}" \
            -d"@/etc/kibana-config/index-logstash.json"
          echo "Index created."

          # Mark the 'logstash-*' pattern as default:
          curl --fail -XPOST --retry 5 \
            -H "Content-Type: application/json" -H "kbn-xsrf: anything" \
            "${kibana_url}/api/kibana/settings/defaultIndex" \
            -d"{\"value\":\"${index_pattern_id}\"}"
          echo "Index set as default."

          # Store saved searches:
          for search_file in /etc/kibana-config/search-*.json; do
            curl --fail -XPOST --retry 5 \
              -H "Content-Type: application/json" -H "kbn-xsrf: anything" \
              "${kibana_url}/api/saved_objects/search" \
              -d"@${search_file}"
            echo "Search for ${search_file} imported."
          done
        volumeMounts:
        - name: config
          mountPath: /etc/kibana-config
      restartPolicy: Never
      volumes:
      - name: config
        configMap:
          name: $APP_INSTANCE_NAME-kibana-configmap
  backoffLimit: 1
---
apiVersion: v1
kind: Service
metadata:
  name: $APP_INSTANCE_NAME-kibana-svc
  labels:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: kibana-server
spec:
  ports:
  - name: http
    port: 5601
  selector:
    app.kubernetes.io/name: "$APP_INSTANCE_NAME"
    app.kubernetes.io/component: kibana-server
  type: ClusterIP
