actions:

- name: Wait until Elasticsearch is ready
  bashTest:
    script: |-
      for ((pod=0; pod<${ELASTICSEARCH_REPLICAS}; pod++)); do
        kubectl wait pod/${APP_INSTANCE_NAME}-elasticsearch-${pod} \
          --namespace=${NAMESPACE} \
          --for=condition=Ready \
          --timeout=600s
      done
    expect:
      exitCode:
        equals: 0

- name: Wait until Kibana init job is completed
  bashTest:
    script: |-
      kubectl wait job/${APP_INSTANCE_NAME}-kibana-init-job \
          --namespace=${NAMESPACE} \
          --for=condition=complete \
          --timeout=600s
    expect:
      exitCode:
        equals: 0

- name: Let Elasticsearch data get replicated across the cluster
  bashTest:
    script: |-
      sleep 30
    expect:
      exitCode:
        equals: 0

- name: At least 5 saved searches are found
  bashTest:
    script: |-
      function count_searches() {
        curl -s "${KIBANA_FIND_URL}?type=search" | jq '.total'
      }
      timeout=300
      timeout_time="$(( $(date +%s) + timeout ))"
      while [[ "$(count_searches)" -lt 5 ]] \
          && [[ "$(date +%s)" -le "${timeout_time}" ]]; do
        sleep 3
      done
      if [[ "$(count_searches)" -ge 5 ]]; then
        echo "OK - saved searches found"
      else
        echo "FAIL - no saved searches found"
      fi
    expect:
      stdout:
        contains: OK - saved searches found

- name: All nodes are connected to the cluster
  bashTest:
    script: |-
      nodes="$(curl -XGET "${HEALTH_URL}?wait_for_nodes=${ELASTICSEARCH_REPLICAS}&timeout=300s" \
        | jq '.number_of_nodes')"
      if [[ "${nodes}" -eq "${ELASTICSEARCH_REPLICAS}" ]]; then
        echo "OK - all nodes found"
      else
        echo "FAIL - found nodes: ${nodes}"
      fi
    expect:
      stdout:
        equals: OK - all nodes found

- name: Cluster reports green status
  bashTest:
    script: |-
      curl -XGET "${HEALTH_URL}?wait_for_status=green&timeout=300s" | jq -r '.status'
    expect:
      stdout:
        equals: 'green'

- name: Kibana UI is available
  bashTest:
    script: |-
      curl -s -f "${KIBANA_URL}/app/kibana"
    expect:
      exitCode:
        equals: 0

- name: Saved search "GKE Apps logs" is found exactly once
  bashTest:
    script: |-
      find_saved_kibana_search_count '"GKE Apps logs"'
    expect:
      stdout:
        contains: OK - "GKE Apps logs" search found once

- name: Saved search "kubelet logs" is found exactly once
  bashTest:
    script: |-
      find_saved_kibana_search_count '"kubelet logs"'
    expect:
      stdout:
        contains: OK - "kubelet logs" search found once

- name: Saved search "kube-proxy logs" is found exactly once
  bashTest:
    script: |-
      find_saved_kibana_search_count '"kube-proxy logs"'
    expect:
      stdout:
        contains: OK - "kube-proxy logs" search found once

- name: Saved search "docker logs" is found exactly once
  bashTest:
    script: |-
      find_saved_kibana_search_count '"docker logs"'
    expect:
      stdout:
        contains: OK - "docker logs" search found once

- name: Saved search "kernel logs" is found exactly once
  bashTest:
    script: |-
      find_saved_kibana_search_count '"kernel logs"'
    expect:
      stdout:
        contains: OK - "kernel logs" search found once

- name: Saved index pattern "logstash-*" is found exactly once
  bashTest:
    script: |-
      find_saved_kibana_index_pattern_count '"logstash-*"'
    expect:
      stdout:
        contains: OK - "logstash-*" index pattern found once

- name: GKE logs are found in Elasticsearch
  bashTest:
    script: |-
      function count_logstash_indices() {
        curl -s "${ELASTIC_URL}/_cat/indices" | grep -c 'logstash-'
      }

      timeout=300
      timeout_time="$(( $(date +%s) + timeout ))"

      # Wait for logstash indices being found
      while [[ "$(count_logstash_indices)" -eq 0 ]] \
          && [[ "$(date +%s)" -le "${timeout_time}" ]]; do
        sleep 3
      done

      if [[ "$(count_logstash_indices)" -gt 0 ]]; then
        echo "OK - logstash index found"
      else
        echo "FAIL - no logstash index"
      fi
    expect:
      stdout:
        contains: OK - logstash index found
