apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-rabbitmq
  labels: &RabbitMQDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: rabbitmq-server
spec:
  selector:
    matchLabels: *RabbitMQDeploymentLabels
  serviceName: {{ .Release.Name }}-rabbitmq-discovery
  replicas: {{ .Values.rabbitmq.replicas }}
  updateStrategy:
      # https://www.rabbitmq.com/upgrade.html
      # https://cloud.google.com/kubernetes-engine/docs/how-to/updating-apps
      type: RollingUpdate
  template:
    metadata:
      labels: *RabbitMQDeploymentLabels
    spec:
      serviceAccountName: {{ .Values.rabbitmq.serviceAccount }}
      terminationGracePeriodSeconds: 180
      initContainers:
      # This init container copies the config files from read-only ConfigMap to writable location.
      - name: copy-rabbitmq-config
        image: {{ .Values.rabbitmq.initImage }}
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -euc
        - |
          # Remove cached erlang cookie since we are always providing it,
          # that opens the way to recreate the application and access to existing data
          # as a new erlang will be regenerated again.
          rm -f /var/lib/rabbitmq/.erlang.cookie

          # Copy the mounted configuration to both places.
          cp /rabbitmqconfig/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
          cp /rabbitmqconfig/enabled_plugins /etc/rabbitmq/enabled_plugins
        volumeMounts:
        - name: configmap
          mountPath: /rabbitmqconfig
        - name: config
          mountPath: /etc/rabbitmq
        - name: {{ .Release.Name }}-rabbitmq-pvc
          mountPath: /var/lib/rabbitmq
      containers:
      - name: rabbitmq
        image: {{ .Values.rabbitmq.image }}
        imagePullPolicy: Always
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: RABBITMQ_USE_LONGNAME
          value: 'true'
        - name: RABBITMQ_NODENAME
          value: 'rabbit@$(MY_POD_NAME).{{ .Release.Name }}-rabbitmq-discovery.{{ .Release.Namespace }}.svc.cluster.local'
        - name: K8S_SERVICE_NAME
          value: '{{ .Release.Name }}-rabbitmq-discovery'
        - name: K8S_HOSTNAME_SUFFIX
          value: '.{{ .Release.Name }}-rabbitmq-discovery.{{ .Release.Namespace }}.svc.cluster.local'
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-rabbitmq-secret
              key: rabbitmq-erlang-cookie
        # User name to create when RabbitMQ creates a new database from scratch.
        - name: RABBITMQ_DEFAULT_USER
          value: '{{ .Values.rabbitmq.user }}'
        # Password for the default user.
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-rabbitmq-secret
              key: rabbitmq-pass
        ports:
        - name: clitool
          containerPort: 25672
        - name: client-access-2
          containerPort: 5672
        - name: client-access-1
          containerPort: 5671
        - name: epmd
          containerPort: 4369
        - name: http
          containerPort: 15672
        volumeMounts:
        - name: config
          mountPath: /etc/rabbitmq
        - name: {{ .Release.Name }}-rabbitmq-pvc
          mountPath: /var/lib/rabbitmq
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 20
          timeoutSeconds: 30
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Wait for the RabbitMQ to be ready.
                until rabbitmqctl node_health_check; do
                  sleep 5
                done

                # By default, RabbitMQ does not have Highly Available policies enabled,
                # using the following command to enable it.
                rabbitmqctl set_policy ha-all "." '{"ha-mode":"all", "ha-sync-mode":"automatic"}' --apply-to all --priority 0
      volumes:
      - name: configmap
        configMap:
          name: {{ .Release.Name }}-rabbitmq-config
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
      - name: config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-rabbitmq-pvc
      labels: *RabbitMQDeploymentLabels
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
