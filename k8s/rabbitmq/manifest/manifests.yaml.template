apiVersion: v1
kind: Secret
metadata:
  name: $APP_INSTANCE_NAME-rabbitmq-secret
  labels:
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: rabbitmq-server
type: Opaque
data:
  # this value comes from schema.yaml or environment variable
  rabbitmq-erlang-cookie: "$RABBITMQ_ERLANG_COOKIE"
  rabbitmq-pass: "$RABBITMQ_DEFAULT_PASS"
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: $APP_INSTANCE_NAME-rabbitmq
  labels: &RabbitMQDeploymentLabels
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: rabbitmq-server
spec:
  selector:
    matchLabels: *RabbitMQDeploymentLabels
  serviceName: $APP_INSTANCE_NAME-rabbitmq-discovery
  replicas: $REPLICAS
  updateStrategy:
      # https://www.rabbitmq.com/upgrade.html
      # https://cloud.google.com/kubernetes-engine/docs/how-to/updating-apps
      type: RollingUpdate
  template:
    metadata:
      labels: *RabbitMQDeploymentLabels
    spec:
      serviceAccountName: $RABBITMQ_SERVICE_ACCOUNT
      terminationGracePeriodSeconds: 180
      initContainers:
      # This init container copies the config files from read-only ConfigMap to writable location.
      - name: copy-rabbitmq-config
        image: $IMAGE_RABBITMQ_INIT
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -euc
        - |
          # Remove cached erlang cookie since we are always providing it,
          # that opens the way to recreate the application and access to existing data
          # as a new erlang will be regenerated again.
          rm -f /var/lib/rabbitmq/.erlang.cookie

          # Copy the mounted configuration to both places.
          cp /rabbitmqconfig/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
          cp /rabbitmqconfig/enabled_plugins /etc/rabbitmq/enabled_plugins
        volumeMounts:
        - name: configmap
          mountPath: /rabbitmqconfig
        - name: config
          mountPath: /etc/rabbitmq
        - name: $APP_INSTANCE_NAME-rabbitmq-pvc
          mountPath: /var/lib/rabbitmq
      containers:
      - name: rabbitmq
        image: $IMAGE_RABBITMQ
        imagePullPolicy: Always
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: RABBITMQ_USE_LONGNAME
          value: 'true'
        - name: RABBITMQ_NODENAME
          value: 'rabbit@$(MY_POD_NAME).$APP_INSTANCE_NAME-rabbitmq-discovery.$NAMESPACE.svc.cluster.local'
        - name: K8S_SERVICE_NAME
          value: '$APP_INSTANCE_NAME-rabbitmq-discovery'
        - name: K8S_HOSTNAME_SUFFIX
          value: '.$APP_INSTANCE_NAME-rabbitmq-discovery.$NAMESPACE.svc.cluster.local'
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-rabbitmq-secret
              key: rabbitmq-erlang-cookie
        # User name to create when RabbitMQ creates a new database from scratch.
        - name: RABBITMQ_DEFAULT_USER
          value: '$RABBITMQ_DEFAULT_USER'
        # Password for the default user.
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: $APP_INSTANCE_NAME-rabbitmq-secret
              key: rabbitmq-pass
        ports:
        - name: clitool
          containerPort: 25672
        - name: client-access-2
          containerPort: 5672
        - name: client-access-1
          containerPort: 5671
        - name: epmd
          containerPort: 4369
        - name: http
          containerPort: 15672
        volumeMounts:
        - name: config
          mountPath: /etc/rabbitmq
        - name: $APP_INSTANCE_NAME-rabbitmq-pvc
          mountPath: /var/lib/rabbitmq
        livenessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          exec:
            command:
            - rabbitmqctl
            - status
          initialDelaySeconds: 20
          timeoutSeconds: 30
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - |
                # Wait for the RabbitMQ to be ready.
                until rabbitmqctl node_health_check; do
                  sleep 5
                done

                # By default, RabbitMQ does not have Highly Available policies enabled,
                # using the following command to enable it.
                rabbitmqctl set_policy ha-all "." '{"ha-mode":"all", "ha-sync-mode":"automatic"}' --apply-to all --priority 0
      volumes:
      - name: configmap
        configMap:
          name: $APP_INSTANCE_NAME-rabbitmq-config
          items:
          - key: rabbitmq.conf
            path: rabbitmq.conf
          - key: enabled_plugins
            path: enabled_plugins
      - name: config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: $APP_INSTANCE_NAME-rabbitmq-pvc
      labels: *RabbitMQDeploymentLabels
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: standard
      resources:
        requests:
          storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: $APP_INSTANCE_NAME-rabbitmq-config
  labels:
    app.kubernetes.io/name: $APP_INSTANCE_NAME
    app.kubernetes.io/component: rabbitmq-server
data:
  enabled_plugins: |
      [rabbitmq_management,rabbitmq_peer_discovery_k8s].
  rabbitmq.conf: |
      ## Clustering
      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
      # Use the Pods hostname instead of IP addresses to create a cluster.
      # The Pod IP doesn't work with persistence because new Pods get a new IP addresses,
      # that doesn't have access to existing data after the node name has changed.
      cluster_formation.k8s.address_type = hostname
      cluster_formation.node_cleanup.interval = 10
      # Set to false if automatic removal of unknown/absent nodes
      # is desired. This can be dangerous, see
      #  * http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup
      #  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ
      cluster_formation.node_cleanup.only_log_warning = true
      cluster_partition_handling = autoheal
      ## queue master locator
      queue_master_locator = min-masters
      ## The default "guest" user is only permitted to access the server
      ## via a loopback interface (e.g. localhost)
      ## See http://www.rabbitmq.com/access-control.html#loopback-users
      loopback_users.guest = false
