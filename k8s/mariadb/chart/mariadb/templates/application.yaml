apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: "{{ .Release.Name }}"
  annotations:
    kubernetes-engine.cloud.google.com/icon: >-
      data:image/png;base64,{{ .Files.Get "logo.png" | b64enc }}
    marketplace.cloud.google.com/deploy-info: '{"partner_id": "click-to-deploy-containers", "product_id": "mariadb", "partner_name": "Google Click to Deploy"}'
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
spec:
  descriptor:
    type: MariaDB
    version: "{{ .Values.mariadb.image.tag }}"
    description: |-
      MariaDB is an open source relational database system, and one of the most popular database servers in the world. It is a fork of MySQL.
      # Support
      Google does not offer support for this solution. However, community support is available on
      [Stack Overflow](https://stackoverflow.com/questions/tagged/mariadb/).
      Additional community support is available on [community forums](https://mariadb.com/kb/en/library/community/).
    maintainers:
    - name: Google Click to Deploy
      url: https://cloud.google.com/solutions/#click-to-deploy
    links:
    - description: 'User Guide: Google Click to Deploy MariaDB'
      url: https://github.com/GoogleCloudPlatform/click-to-deploy/blob/master/k8s/mariadb/README.md
    - description: 'Official documentation for MariaDB'
      url: https://mariadb.com/kb/en/library/documentation/
    notes: |-
      # Get the authentication credentials for the cluster

      ```shell
      gcloud container clusters get-credentials [CLUSTER_NAME] --zone [CLUSTER_ZONE]
      ```

      where:
      * `[CLUSTER_NAME]` is the name of the cluster for this application
      * `[CLUSTER_ZONE]` is the zone in which the cluster is running

      For information on getting the credentials for a cluster, read the [Google Kubernetes Engine documentation](https://cloud.google.com/kubernetes-engine/docs/quickstart#get_authentication_credentials_for_the_cluster).

      # Get the status of the cluster

      The application runs one primary instance and several secondary instances.
      The primary instance has read/write access to the database, and the secondary has read-only access.

      By default, the application does not have an external IP address. To get the
      status of the cluster, use `kubectl` to execute `mysqladmin` on the primary node:

      ```
      kubectl exec -it {{ .Release.Name }}-mariadb-0 --namespace {{ .Release.Namespace }} -- bash -c 'mysqladmin -uroot -p$MYSQL_ROOT_PASSWORD status'
      ```
      <!--- ALL THIS BELOW IS COPIED FROM README.MD -->

      # (Optional) Expose the MariaDB service externally

      To create an external IP address, run the following command:

      ```
      kubectl patch svc {{ .Release.Name }}-mariadb {{ .Release.Name }}-mariadb-secondary \
        --namespace {{ .Release.Namespace }} \
        --patch '{"spec": {"type": "LoadBalancer"}}'
      ```

      > **NOTE:** It might take some time for the external IP to be provisioned.

      # Access the MariaDB service

      **Option 1:** If you run your MariaDB cluster behind a LoadBalancer, you can get the external IP of the MariaDB primary instance using the following command:


      ```shell
      PRIMARY_IP=$(kubectl get svc {{ .Release.Name }}-mariadb \
        --namespace {{ .Release.Namespace }} \
        --output jsonpath='{.status.loadBalancer.ingress[0].ip}')

      echo "$PRIMARY_IP"

      SECONDARY_IP=$(kubectl get svc {{ .Release.Name }}-mariadb-secondary \
        --namespace {{ .Release.Namespace }} \
        --output jsonpath='{.status.loadBalancer.ingress[0].ip}')

      echo "$SECONDARY_IP"

      # connect to mariadb server
      mysql --ssl -u<username> -p<password> -h ${PRIMARY_IP}
      # or
      mysql --ssl -u<username> -p<password> -h ${SECONDARY_IP}
      ```

      **Option 2:** Use port forwarding:

      ```
      kubectl port-forward svc/{{ .Release.Name }}-mariadb --namespace {{ .Release.Namespace }} {{ .Values.service.port }}
      # or
      kubectl port-forward svc/{{ .Release.Name }}-mariadb-secondary --namespace {{ .Release.Namespace }} {{ .Values.service.port }}
      ```

      <!--- ALL THIS ABOVE IS COPIED FROM README.MD -->
  info:
  - name: MariaDB
    type: Reference
    valueFrom:
      serviceRef:
        name: {{ .Release.Name }}-mariadb
  - name: MariaDB Application Namespace
    value: {{ .Release.Namespace }}
  - name: MariaDB root password
    type: Reference
    valueFrom:
      secretKeyRef:
        key: mariadb-pass
        name: {{ .Release.Name }}-mariadb
  - name: MariaDB replication user
    type: Reference
    valueFrom:
      secretKeyRef:
        key: mariadb-replication-user
        name: {{ .Release.Name }}-mariadb
  - name: MariaDB replication password
    type: Reference
    valueFrom:
      secretKeyRef:
        key: mariadb-replication-password
        name: {{ .Release.Name }}-mariadb
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}"
  componentKinds:
  - group: apps/v1
    kind: StatefulSet
  - group: v1
    kind: PersistentVolumeClaim
  - group: v1
    kind: Service
  - group: v1
    kind: Secret
  - group: v1
    kind: ConfigMap
