---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-mariadb-secondary
  labels: &MariaDBDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: mariadb-server-secondary
spec:
  replicas: {{ .Values.db.replicas }}
  selector:
    matchLabels: *MariaDBDeploymentLabels
  serviceName: {{ .Release.Name }}-mariadb-secondary
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MariaDBDeploymentLabels
    spec:
      serviceAccountName: "default"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels: *MariaDBDeploymentLabels
      initContainers:
      - name: mariadb-init
        image: "{{ .Values.mariadb.image.repo }}:{{ .Values.mariadb.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: HOST
          value: {{ .Release.Name }}-mariadb.{{ .Release.Namespace }}.svc.cluster.local
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-pass
        command:
        - bash
        - "-cx"
        - |
          echo "Waiting for mysqld to be ready (accepting connections)"
          until mariadb -h ${HOST} -uroot -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done
          # Generate mysql server-id from pod ordinal index.
          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Add an offset to avoid reserved server-id=0 value.
          ID=$((100+$ordinal))
          # Generate appropriate conf.d file from configmap to emptyDir
          sed "s/%%SERVER_ID%%/$ID/g" /mnt/configmap/my.cnf > /mnt/conf.d/my.cnf
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: configmap
          mountPath: /mnt/configmap
      containers:
      - name: mariadb
        image: "{{ .Values.mariadb.image.repo }}:{{ .Values.mariadb.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: MARIADB_MASTER_ROOT_USER
          value: "root"
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-pass
        - name: MARIADB_REPLICATION_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-replication-user
        - name: MARIADB_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-replication-password
        - name: HOST
          value: {{ .Release.Name }}-mariadb.{{ .Release.Namespace }}.svc.cluster.local
        - name: SERVICE_PORT
          value: {{ .Values.service.port | quote }}
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - "-cx"
              - |
                echo "Waiting for mysqld to be ready (accepting connections)"

                until mariadb -uroot -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done
                until mariadb -h ${HOST} -uroot -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done

                mkdir -p /var/mariadb/backup
                BACKUP_FILE=/var/mariadb/backup/all-databases.sql

                mariadb-dump -h${HOST} -P${SERVICE_PORT} -uroot -p${MYSQL_ROOT_PASSWORD} \
                    --add-drop-database --flush-logs --flush-privileges \
                    --master-data --all-databases > ${BACKUP_FILE}

                mariadb -uroot -p${MYSQL_ROOT_PASSWORD} -e "STOP SLAVE;"
                mariadb -uroot -p${MYSQL_ROOT_PASSWORD} -e "CHANGE MASTER TO \
                  MASTER_HOST='${HOST}', \
                  MASTER_PORT=${SERVICE_PORT}, \
                  MASTER_USER='${MARIADB_REPLICATION_USER}', \
                  MASTER_PASSWORD='${MARIADB_REPLICATION_PASSWORD}', \
                  MASTER_SSL=1, \
                  MASTER_CONNECT_RETRY=10;"
                mariadb -uroot -p${MYSQL_ROOT_PASSWORD} < ${BACKUP_FILE}
                mariadb -uroot -p${MYSQL_ROOT_PASSWORD} -e "START SLAVE;"
                rm -f ${BACKUP_FILE}
        ports:
        - name: mariadb
          containerPort: {{ .Values.service.port }}
        livenessProbe:
          tcpSocket:
            port: mariadb
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mariadb
          initialDelaySeconds: 5
          timeoutSeconds: 2
        volumeMounts:
        - name: {{ .Release.Name }}-data-pvc
          mountPath: /var/lib/mariadb
        - name: conf
          mountPath: /etc/mysql/mariadb.conf.d
        - name: tls-volume
          mountPath: /etc/mysql/mariadb.conf.d/certs
      volumes:
        - name: conf
          emptyDir: {}
        - name: configmap
          configMap:
            name: {{ .Release.Name }}-mariadb-secondary
        - name: tls-volume
          secret:
            secretName: {{ .Release.Name }}-tls
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-data-pvc
      labels: *MariaDBDeploymentLabels
    spec:
      resources:
        requests:
          storage: {{ .Values.mariadb.persistence.size }}
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.mariadb.persistence.storageClass }}
