---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-mariadb-secondary
  labels: &MariaDBDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: mariadb-server-secondary
spec:
  replicas: {{ .Values.db.replicas }}
  selector:
    matchLabels: *MariaDBDeploymentLabels
  serviceName: {{ .Release.Name }}-mariadb-secondary
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels: *MariaDBDeploymentLabels
    spec:
      serviceAccountName: "default"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels: *MariaDBDeploymentLabels
      initContainers:
      - name: mariadb-init
        image: "{{ .Values.mariadb.image.repo }}:{{ .Values.mariadb.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: MARIADB_MASTER_HOST
          value: {{ .Release.Name }}-mariadb.{{ .Release.Namespace }}.svc.cluster.local
        - name: MARIADB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-pass
        command:
        - bash
        - "-cx"
        - |
          # Generate appropriate conf.d file from configmap to emptyDir
          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Add an offset to avoid reserved server-id=0 value.
          ID=$((100+$ordinal))

          # Clean up preset config before starting first pod
          echo "Cleaning out MariaDB folder..."
          rm -rf /var/lib/mariadb/*
          mkdir -p /var/lib/mariadb/

          echo "Waiting for primary to be ready (accepting connections)"
          until mariadb -h ${MARIADB_MASTER_HOST} -uroot -p${MARIADB_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done
          # Generate mysql server-id from pod ordinal index.
          sed "s/%%SERVER_ID%%/$ID/g" /mnt/configmap/my.cnf > /mnt/conf.d/my.cnf
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: configmap
          mountPath: /mnt/configmap
      containers:
      - name: mariadb
        image: "{{ .Values.mariadb.image.repo }}:{{ .Values.mariadb.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: MARIADB_MASTER_ROOT_USER
          value: "root"
        - name: MARIADB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-pass
        - name: MARIADB_REPLICATION_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-replication-user
        - name: MARIADB_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-mariadb
              key: mariadb-replication-password
        - name: MARIADB_MASTER_HOST
          value: {{ .Release.Name }}-mariadb.{{ .Release.Namespace }}.svc.cluster.local
        - name: SERVICE_PORT
          value: {{ .Values.service.port | quote }}
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - "-cx"
              - |
                cp /scripts/post_start.sh /tmp/post_start.sh
                chmod +x /tmp/post_start.sh
                /tmp/post_start.sh >> /etc/mysql/mariadb.conf.d/post_start.log
        ports:
        - name: mariadb
          containerPort: {{ .Values.service.port }}
        livenessProbe:
          tcpSocket:
            port: mariadb
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: mariadb
          initialDelaySeconds: 5
          timeoutSeconds: 2
        volumeMounts:
        - name: {{ .Release.Name }}-data-pvc
          mountPath: /var/lib/mariadb
        - name: conf
          mountPath: /etc/mysql/mariadb.conf.d
        - name: tls-volume
          mountPath: /etc/mysql/mariadb.conf.d/certs
        - name: post-start-scripts
          mountPath: /scripts/
      volumes:
        - name: conf
          emptyDir: {}
        - name: configmap
          configMap:
            name: {{ .Release.Name }}-mariadb-secondary
        - name: tls-volume
          secret:
            secretName: {{ .Release.Name }}-tls
        - name: post-start-scripts
          secret:
            secretName: {{ .Release.Name }}-mariadb-secondary
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-data-pvc
      labels: *MariaDBDeploymentLabels
    spec:
      resources:
        requests:
          storage: {{ .Values.mariadb.persistence.size }}
      accessModes:
      - ReadWriteOnce
      storageClassName: {{ .Values.mariadb.persistence.storageClass }}
