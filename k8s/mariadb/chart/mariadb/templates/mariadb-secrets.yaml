---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-mariadb
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: mariadb-server
stringData:
  mariadb-replication-user: {{ .Values.replication.user }}
  mariadb-replication.sql: |
    CREATE USER IF NOT EXISTS '{{ .Values.replication.user }}'@'%' IDENTIFIED BY '{{ .Values.replication.password | b64dec }}' WITH MAX_USER_CONNECTIONS {{ .Values.replication.maxConnections }};
    GRANT REPLICATION REPLICA ON *.* TO '{{ .Values.replication.user }}'@'%' REQUIRE SSL;
    FLUSH PRIVILEGES;
  mysqld_exporter.sql: |
    CREATE USER IF NOT EXISTS '{{ .Values.db.exporter.user }}'@'127.0.0.1' IDENTIFIED BY '{{ .Values.db.exporter.password | b64dec }}' WITH MAX_USER_CONNECTIONS 3;
    # https://dev.mysql.com/doc/refman/5.6/en/grant.html
    GRANT PROCESS, REPLICATION CLIENT, SELECT, SLAVE MONITOR ON *.* TO '{{ .Values.db.exporter.user }}'@'127.0.0.1';
    FLUSH PRIVILEGES;
data:
  mariadb-pass: {{ .Values.db.password }}
  mariadb-replication-password: {{ .Values.replication.password }}
  mysqld-exporter-pass: {{ .Values.db.exporter.password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: mariadb-server
data:
  tls.key: |
{{ .Values.tls.base64EncodedPrivateKey | indent 4 }}
  tls.crt: |
{{ .Values.tls.base64EncodedCertificate | indent 4 }}
  ca.crt: |
{{ .Values.tls.base64EncodedCertificate | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-mariadb-secondary
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: mariadb-server
stringData:
  post_start.sh: |
    #!/bin/bash
    set -x
    set +e

    echo "------"
    echo "Script starting at:"
    date

    can_connect_without_password=0
    while [[ "${can_connect_without_password}" -eq 0 ]]; do
      if [[ -f /var/lib/mariadb/01-credentials.lock ]]; then
        exit 0
      fi

      can_connect_without_password="$(mariadb \
                                        --skip-ssl-verify-server-cert \
                                        -e "SELECT 1" | wc -l)"

      if [[ "${can_connect_without_password}" -gt 0 ]]; then
        echo "Can connect without passsword."
        echo "Reset localhost root credentials..."

        mariadb --skip-ssl-verify-server-cert -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '${MARIADB_ROOT_PASSWORD}'; FLUSH PRIVILEGES;"
        echo "Credentials successfully set."
        touch /var/lib/mariadb/01-credentials.lock
      else
        echo "Cannot connect without password."
        echo "$(date) - Retrying in 3s..."
        sleep 3
      fi
    done

    echo "Checking localhost using password..."
    until mariadb -uroot -p${MARIADB_ROOT_PASSWORD} --skip-ssl-verify-server-cert -e "SELECT 1"; do
      echo "$(date) Retrying localhost..."
      sleep 2
    done

    echo "Waiting for primary to be ready (accepting connections)..."
    until mariadb -h ${MARIADB_MASTER_HOST} -uroot -p${MARIADB_ROOT_PASSWORD} --skip-ssl-verify-server-cert -e "SELECT 1"; do sleep 1; done
    echo "Servers ready."

    mkdir -p /var/mariadb/backup
    BACKUP_FILE=/var/mariadb/backup/all-databases.sql

    echo "Backing up primary host..."
    mariadb-dump -h${MARIADB_MASTER_HOST} -P${SERVICE_PORT} -uroot -p${MARIADB_ROOT_PASSWORD} \
        --add-drop-database --flush-logs --flush-privileges \
        --master-data --all-databases --skip-ssl-verify-server-cert > ${BACKUP_FILE}

    echo "Setting up primary connection on localhost..."
    mariadb -uroot -p${MARIADB_ROOT_PASSWORD} --skip-ssl-verify-server-cert -e "STOP SLAVE;"
    mariadb -uroot -p${MARIADB_ROOT_PASSWORD} --skip-ssl-verify-server-cert -e "CHANGE MASTER TO \
      MASTER_HOST='${MARIADB_MASTER_HOST}', \
      MASTER_PORT=${SERVICE_PORT}, \
      MASTER_USER='${MARIADB_REPLICATION_USER}', \
      MASTER_PASSWORD='${MARIADB_REPLICATION_PASSWORD}', \
      MASTER_SSL=1, \
      MASTER_CONNECT_RETRY=10;"

    echo "Restoring backup on localhost..."
    retry_count=0
    max_retries=10

    while [[ $retry_count -lt $max_retries ]]; do
      mariadb -uroot -p${MARIADB_ROOT_PASSWORD} --skip-ssl-verify-server-cert < ${BACKUP_FILE}
      if [[ $? -eq 0 ]]; then
        echo "Backup restored!"
        break
      fi

      echo "Command failed, retrying ${retry_count}/${max_retries}..."
      sleep 5
      retry_count=$((retry_count + 1))
    done

    if [[ $retry_count -eq $max_retries ]]; then
      echo "Max retries reached, command failed."
      exit 1
    fi

    echo "Starting secondary mode on localhost..."
    mariadb -uroot -p${MARIADB_ROOT_PASSWORD} --skip-ssl-verify-server-cert -e "START SLAVE;"
    rm -f ${BACKUP_FILE}
