apiVersion: app.k8s.io/v1beta1
kind: Application
metadata:
  name: "{{ .Release.Name }}"
  annotations:
    kubernetes-engine.cloud.google.com/icon: >-
      data:image/png;base64,{{ .Files.Get "logo.png" | b64enc }}
    marketplace.cloud.google.com/deploy-info: '{"partner_id": "click-to-deploy-containers", "product_id": "nginx", "partner_name": "Google Click to Deploy"}'
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
spec:
  descriptor:
    type: NGINX
    version: "{{ .Values.nginx.image.tag }}"
    description: |-
      NGINX is open-source software for web serving, reverse proxying,
      caching, load balancing, and media streaming.

      NGINX can also function as a proxy server for email (IMAP, POP3, and SMTP)
      and a reverse proxy and load balancer for HTTP, TCP, and UDP servers.

      If you would like to learn more about NGINX, please,
      visit [NGINX website](https://www.nginx.com/).

      # Support

      This image is built by Google. It is your responsibility to keep
      container images you run or store in your own repositories
      up to date with security patches.

      Community support for NGINX is available on
      [Stack Overflow](http://stackoverflow.com/questions/tagged/nginx/).

      Please report issues with this NGINX container image via
      the [GitHub Issue Tracker](https://github.com/GoogleCloudPlatform/nginx-docker/issues).
    maintainers:
    - name: Google Click to Deploy
      url: https://cloud.google.com/solutions/#click-to-deploy
    links:
    - description: 'User Guide: Google Click to Deploy NGINX'
      url: https://github.com/GoogleCloudPlatform/nginx-docker/blob/master/1/README.md
    - description: 'NGINX: Getting Started'
      url: https://www.nginx.com/resources/wiki/start/
    notes: |-
      # Configuring the web content of NGINX server

      Follow this instructions to upload web content to your Web Server:

      1. Navigate to a folder where directory containing your website is located
         (e.g. assuming that your web content is stored in `html` directory)
      1. Run the following command to copy the content of `html` directory to the Persistent Volume:
         ```
         kubectl cp html {{ .Release.Name }}-nginx-0:/usr/share/nginx -n {{ .Release.Namespace }}
         ```
      1. Set permissions so NGINX server has access to the newly uploaded `html` directory:
         ```
         kubectl exec {{ .Release.Name }}-nginx-0 -n {{ .Release.Namespace }} -- chmod -R a+r /usr/share/nginx/html
         ```
      # Configuring SSL certificate for NGINX server

      This version of NGINX application uses pre-generated certificate which is self-signed and is meant to be
      only a temporary solution just to exemplify SSL/TLS configuration.

      Generate a new self-signed certificate for your NGINX server using `openssl` command
      or use a signed certifcate that you already own.

      For example, if you would like to generate self-signed certifcate and private key
      you could run the following command:
      ```
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout https1.key -out https1.cert
      ```

      Configure your own certificate using the following command:
      ```
      export CERT_FILE=https1.cert
      export KEY_FILE=https1.key
      export APP_INSTANCE_NAME=<name of your NGINX instance, e.g. nginx-1>
      export NAMESPACE=<name of your Kurbernetes namespace, e.g. default>

      # using --dry-run option because we update existing secret resource
      # if we used kubectl create... for existing secret we would get an error
      kubectl --namespace {{ .Release.Namespace }} create secret generic {{ .Release.Name }}-nginx-secret \
        --from-file=$CERT_FILE --from-file=$KEY_FILE \
        --dry-run -o yaml | kubectl apply -f -
      ```
      where .cert is a file containing SSL certificate and .key file contains private part of it.

      Run these commands to restart all Pods without causing a downtime
      ```
      PODS=$(kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/name={{ .Release.Name }} | awk 'FNR>1 {print $1}')

      TIMEOUT=60

      for i in ${PODS[@]}; do
        echo "Deleting Pod: $i..."
        kubectl delete pod $i --namespace {{ .Release.Namespace }}
        echo "Sleeping for $TIMEOUT seconds..."
        sleep $TIMEOUT
      done
      ```
  info:
  - name: Nginx External IP
    type: Reference
    valueFrom:
      serviceRef:
        name: {{ .Release.Name }}-nginx-svc
        protocol: HTTPS
  - name: Application Namespace
    value: {{ .Release.Namespace }}
  - name: Nginx Configuration
    value: nginx-config.conf
  - name: Nginx Cert
    type: Reference
    valueFrom:
      secretKeyRef:
        key: https1.cert
        name: {{ .Release.Name }}-nginx-secret
  - name: Nginx Key
    type: Reference
    valueFrom:
      secretKeyRef:
        key: https1.key
        name: {{ .Release.Name }}-nginx-secret
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}"
  componentKinds:
  - group: v1
    kind: ConfigMap
  - group: v1
    kind: PersistentVolumeClaim
  - group: apps/v1
    kind: StatefulSet
  - group: v1
    kind: Secret
  - group: v1
    kind: Service
