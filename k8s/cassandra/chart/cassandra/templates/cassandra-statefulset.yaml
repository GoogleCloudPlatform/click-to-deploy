---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-cassandra
  labels: &CassandraDeploymentLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: cassandra-server
spec:
  selector:
    matchLabels: *CassandraDeploymentLabels
  serviceName: {{ .Release.Name }}-cassandra-svc
  podManagementPolicy: "Parallel"
  replicas: {{ .Values.cassandra.replicas }}
  updateStrategy:
      type: OnDelete
  template:
    metadata:
      labels: *CassandraDeploymentLabels
    spec:
      terminationGracePeriodSeconds: 180
      containers:
      - name: cassandra
        image: "{{ .Values.cassandra.image.repo }}:{{ .Values.cassandra.image.tag }}"
        imagePullPolicy: Always
        env:
        - name: CASSANDRA_CGROUP_MEMORY_LIMIT
          value: 'true'
        - name: CASSANDRA_CLUSTER_NAME
          value: {{ .Release.Name }}-cassandra-svc
        - name: CASSANDRA_PROMETHEUS_ENABLED
          value: 'true'
        {{- $fullName := .Release.Name }}
        {{- $releaseName := .Release.Namespace }}
        {{- $initialCluster := list }}
        {{- range $e, $i := until (int .Values.cassandra.replicas) }}
        {{- $initialCluster = append $initialCluster (printf "%s-cassandra-%d.%s-cassandra-svc.%s.svc.cluster.local" $fullName $i $fullName $releaseName) }}
        {{- end }}
        - name: CASSANDRA_SEEDS
          value: {{ printf "%s" (join "," $initialCluster) | quote }}
        ports:
        - name: pure-intra
          containerPort: 7000
        - name: tls-intra
          containerPort: 7001
        - name: jmx
          containerPort: 7199
        - name: cql
          containerPort: 9042
        - name: thrift
          containerPort: 9160
        - name: prometheus
          containerPort: 9404
        resources:
          requests:
           cpu: 500m
           memory: 4Gi
          limits:
           cpu: 500m
           memory: 4Gi
        volumeMounts:
        - name: {{ .Release.Name }}-cassandra-pvc
          mountPath: /var/lib/cassandra
        livenessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool -Dcom.sun.jndi.rmiURLParsing=legacy status" ]
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool -Dcom.sun.jndi.rmiURLParsing=legacy status | grep -E \"^UN\\s+${POD_IP}\"" ]
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 10
        lifecycle:
          preStop:
            exec:
              command:
              - "/bin/sh"
              - "-c"
              - "nodetool -Dcom.sun.jndi.rmiURLParsing=legacy drain"
      {{ if .Values.metrics.exporter.enabled }}
      - name: prometheus-to-sd
        image: {{ .Values.metrics.image }}
        ports:
        - name: profiler
          containerPort: 6060
        command:
        - /monitor
        - --stackdriver-prefix=custom.googleapis.com
        - --source=cassandra:http://localhost:9404/metrics
        - --pod-id=$(POD_NAME)
        - --namespace-id=$(POD_NAMESPACE)
        - --monitored-resource-types=k8s
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{ end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-cassandra-pvc
      labels: *CassandraDeploymentLabels
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.cassandra.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.cassandra.persistence.size }}
