actions:
- name: 3 nodes deployed successfully
  bashTest:
    script: |-
      set -x
      function stderr_msg {
        >&2 echo "${@}"
      }

      function get_desired_number_of_replicas_in_sts {
        kubectl get sts "${STS_NAME}" \
          --namespace "${NAMESPACE}" \
          --output jsonpath='{.spec.replicas}'
      }

      function get_current_number_of_replicas_in_sts {
        kubectl get sts "${STS_NAME}" \
          --namespace "${NAMESPACE}" \
          --output jsonpath='{.status.readyReplicas}'
      }

      function wait_for_healthy_sts {
        stderr_msg "Waiting for equal desired and current number of replicas"
        while [[ $(get_current_number_of_replicas_in_sts) -ne $(get_desired_number_of_replicas_in_sts) ]]; do
          stderr_msg "Sleeping 10 seconds before rechecking..."
          sleep 10
        done
        info "Statefulset has equal current and desired number of replicas"
      }
      STS_NAME="${APP_INSTANCE_NAME}-cassandra"
      wait_for_healthy_sts
      kubectl get sts "${STS_NAME}" \
        --namespace "${NAMESPACE}" \
        --output jsonpath='{.status.readyReplicas}'
    expect:
      exitCode:
        equals: 0
- name: Execute CQL query
  bashTest:
    script: |-
      set -e
      for i in $(seq 0 2); do
        export CQLSH_HOST=$APP_INSTANCE_NAME-cassandra-$i.$APP_INSTANCE_NAME-cassandra-svc.$NAMESPACE.svc.cluster.local
        cqlsh -e 'SHOW HOST' --cqlversion="3.4.4"
      done
    expect:
      exitCode:
        equals: 0
- name: Cluster is connected
  bashTest:
    script: |-
      set -e
      kubectl exec $APP_INSTANCE_NAME-cassandra-0 -- nodetool status | grep "^UN" -c
    expect:
      stdout:
        equals: "3"
      exitCode:
        equals: 0
- name: Can read/write data between nodes
  bashTest:
    script: |-
      set -e
        export CQLSH_HOST=$APP_INSTANCE_NAME-cassandra-0.$APP_INSTANCE_NAME-cassandra-svc.$NAMESPACE.svc.cluster.local
        cqlsh -e "CREATE KEYSPACE demo WITH REPLICATION ={'class':'SimpleStrategy', 'replication_factor' : 2};" --cqlversion="3.4.4" > /dev/null
        cqlsh -e "CREATE TABLE demo.person ( name varchar PRIMARY KEY );" --cqlversion="3.4.4" > /dev/null
        cqlsh -e "INSERT INTO demo.person  (name) VALUES ('John');" --cqlversion="3.4.4" > /dev/null

        export CQLSH_HOST=$APP_INSTANCE_NAME-cassandra-1.$APP_INSTANCE_NAME-cassandra-svc.$NAMESPACE.svc.cluster.local
        cqlsh -e "SELECT * FROM demo.person" --cqlversion="3.4.4"
    expect:
      stdout:
        contains: "John"
      exitCode:
        equals: 0
