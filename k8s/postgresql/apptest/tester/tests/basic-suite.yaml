actions:
- name: Secure login
  bashTest:
    script: |-
      SERVICE="${APP_INSTANCE_NAME}-postgresql-svc"
      PGPASSWORD=''
      FAILED=0

      echo "Getting PostgreSQL postgres Password."
      PGPASSWORD=$(kubectl get secret "${APP_INSTANCE_NAME}-secret" \
        --namespace "${NAMESPACE}" \
        --output=jsonpath='{.data.password}' | base64 -d)

      # test1 -- authenticated connection
      if ! PGPASSWORD="${PGPASSWORD}" psql sslmode=require -U postgres -h "${SERVICE}" -c '\dt' | grep -q 'No relations found'; then
        echo "Test1: secure connection -- failed"
        $((FAILED+=1))
      fi

      if [[ "${FAILED}" != 0 ]]; then
        echo
        echo "Username: postgres"
        echo "Password: ${PGPASSWORD}"
        echo "Service: ${SERVICE}"
        echo
        exit "${FAILED}"
      fi
    expect:
      exitCode:
        equals: 0
- name: Db operations
  bashTest:
    script: |-
      SERVICE="${APP_INSTANCE_NAME}-postgresql-svc"
      PGPASSWORD=''
      FAILED=0

      echo "Getting PostgreSQL postgres Password."
      PGPASSWORD=$(kubectl get secret "${APP_INSTANCE_NAME}-secret" \
        --namespace "${NAMESPACE}" \
        --output=jsonpath='{.data.password}' | base64 -d)

      # test1 -- CREATE TABLE
      PGCOMMAND="CREATE TABLE test(id serial PRIMARY KEY, name VARCHAR (255) NOT NULL);"
      if ! PGPASSWORD="${PGPASSWORD}" psql sslmode=require -U postgres -h "${SERVICE}" -c "${PGCOMMAND}" | grep -q '^CREATE TABLE$'; then
        echo "Test1: CREATE TABLE -- failed"
        $((FAILED+=1))
      fi

      # test2 -- INSERT INTO
      PGCOMMAND="INSERT INTO test (name) VALUES ('test');"
      if ! PGPASSWORD="${PGPASSWORD}" psql sslmode=require -U postgres -h "${SERVICE}" -c "${PGCOMMAND}" | grep -q '^INSERT 0 1$'; then
        echo "Test2: INSERT INTO -- failed"
        $((FAILED+=1))
      fi

      # test3 -- SELECT FROM (correct value)
      PGCOMMAND="SELECT * from test"
      if ! PGPASSWORD="${PGPASSWORD}" psql sslmode=require -U postgres -h "${SERVICE}" -c "${PGCOMMAND}" | grep -q '^  1 | test$'; then
        echo "Test3: SELECT FROM (correct value) -- failed"
        $((FAILED+=1))
      fi

      # test4 -- SELECT FROM (incorrect value)
      PGCOMMAND="SELECT * from test"
      if PGPASSWORD="${PGPASSWORD}" psql sslmode=require -U postgres -h "${SERVICE}" -c "${PGCOMMAND}" | grep -q '^  1 | value$'; then
        echo "Test4: SELECT FROM (incorrect value) -- failed"
        $((FAILED+=1))
      fi

      if [[ "${FAILED}" != 0 ]]; then
        echo
        echo "Username: postgres"
        echo "Password: ${PGPASSWORD}"
        echo "Service: ${SERVICE}"
        echo
        exit "${FAILED}"
      fi
    expect:
      exitCode:
        equals: 0
