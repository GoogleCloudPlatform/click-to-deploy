kind: Secret
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-secret
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: postgresql-server
type: Opaque
data:
  password: {{ .Values.db.password }}
---
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgresql
  labels: &PostgreSQLLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: postgresql-server
spec:
  replicas: 1
  selector:
    matchLabels: *PostgreSQLLabels
  serviceName: {{ .Release.Name }}-postgresql-svc
  template:
    metadata:
      labels: *PostgreSQLLabels
    spec:
      serviceAccount: {{ .Values.postgresql.serviceAccount }}
      volumes:
      - name: tls-volume
        secret:
          secretName: {{ .Release.Name }}-tls
      containers:
      - name: postgresql-server
        image: {{ .Values.postgresql.image }}
        imagePullPolicy: Always
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: {{ .Release.Name }}-postgresql-pvc
          mountPath: /var/lib/postgresql/data
        - name: tls-volume
          mountPath: /var/lib/postgresql/data/tls
        env:
        - name: "PGDATA"
          value: "/var/lib/postgresql/data/pgdata"
        - name: "POSTGRES_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: password
      - name: prometheus-exporter
        image: {{ .Values.exporter.image }}
        imagePullPolicy: Always
        ports:
        - containerPort: 9187
          name: exporter
        env:
        - name: "DATA_SOURCE_URI"
          value: "localhost:5432/postgres?sslmode=disable"
        - name: "DATA_SOURCE_USER"
          value: "postgres"
        - name: "DATA_SOURCE_PASS"
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-secret
              key: password
      {{ if .Values.metrics.enabled }}
      - name: stackdriver-exporter
        image: {{ .Values.metrics.image }}
        ports:
        - name: profiler
          containerPort: 6060
        command:
        - /monitor
        - --stackdriver-prefix=custom.googleapis.com
        - --source=postgresql:http://localhost:9187/metrics
        - --pod-id=$(POD_NAME)
        - --namespace-id=$(POD_NAMESPACE)
        - --monitored-resource-types=k8s
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{ end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-postgresql-pvc
      labels: *PostgreSQLLabels
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: standard
      resources:
        requests:
          storage: {{ .Values.postgresql.volumeSize }}Gi
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-postgresql-svc
  labels: &PostgreSQLLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: postgresql-server
spec:
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  selector: *PostgreSQLLabels
{{ if .Values.postgresql.exposePublicService }}
  type: LoadBalancer
{{ else }}
  type: ClusterIP
{{ end }}
---
kind: Service
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-postgres-exporter-svc
  labels: &PostgreSQLLabels
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: postgresql-server
spec:
  ports:
  - name: prometheus-exporter
    port: 9187
  selector: *PostgreSQLLabels
  type: ClusterIP
