apiVersion: batch/v1
kind: Job
metadata:
  annotations:
  name: {{ template "cert_manager.CRDsJob" . }}
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: crd-job
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    spec:
      containers:
      - command:
        - "/bin/bash"
        - "-ec"
        - |
          for crd in /crd_to_create/*/*;
            do kubectl apply -f $crd --validate=false;
          done
          for webhook in /webhooks/*;
            do kubectl apply -f $webhook;
          done
          kubectl patch Application/{{ .Release.Name }} --type json --output json -p \
          '[
            { "op": "add", "path": "/spec/componentKinds/-",
              "value": { "group": "admissionregistration.k8s.io/v1beta1",
                          kind: "MutatingWebhookConfiguration" } },
            { "op": "add", "path": "/spec/componentKinds/-",
              "value": { "group": "admissionregistration.k8s.io/v1beta1",
                          kind: "ValidatingWebhookConfiguration" } },
           ]'
          app_uid="$(kubectl get "applications.app.k8s.io/{{ .Release.Name }}" \
          --namespace="{{ .Release.Namespace }}" \
          --output=jsonpath='{.metadata.uid}')"
          app_api_version="$(kubectl get "applications.app.k8s.io/{{ .Release.Name }}" \
          --namespace="{{ .Release.Namespace }}" \
          --output=jsonpath='{.apiVersion}')"
          patch="$(echo '{}' \
            | jq '{
                    "metadata": {
                      "ownerReferences": [
                        {
                          "apiVersion": $app_api_version,
                          "kind": "Application",
                          "name": $name,
                          "uid": $app_uid,
                          "blockOwnerDeletion": true
                        }
                      ],
                      "labels": {
                        "app.kubernetes.io/name": $name,
                        "app.kubernetes.io/namespace": $namespace
                      }
                    }
                  }' \
                  --arg name {{ .Release.Name }}  \
                  --arg namespace {{ .Release.Namespace }} \
                  --arg app_uid $app_uid \
                  --arg app_api_version $app_api_version)"
          kubectl patch MutatingWebhookConfiguration/{{ include "webhook.fullname" . }} --patch "$patch" --output json
          kubectl patch ValidatingWebhookConfiguration/{{ include "webhook.fullname" . }} --patch "$patch" --output json
        image: {{ .Values.deployer.image }}
        imagePullPolicy: Always
        name: crd-create
        volumeMounts:
          - name: {{ template "cert_manager.WebHookConfigMap" . }}
            mountPath: /webhooks/
          {{- $root := . -}}
          {{- $release := .Release.Name -}}
          {{- $name := default .Chart.Name .Values.nameOverride -}}
          {{- range $path, $bytes := .Files.Glob "files/crd/*.yaml" }}
          {{- $file := printf (base ($path)) }}
          - name: {{ printf "%s" $file | replace "." "-" | trimSuffix "-" }}
            mountPath: /crd_to_create/{{ printf "%s" $file }}/
          {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccountName: {{ .Values.CDRJobServiceAccount }}
      volumes:
      - name: {{ template "cert_manager.WebHookConfigMap" . }}
        configMap:
          name: {{ template "cert_manager.WebHookConfigMap" . }}
       {{- $root := . -}}
       {{- $release := .Release.Name -}}
       {{- $name := default .Chart.Name .Values.nameOverride -}}
       {{- range $path, $bytes := .Files.Glob "files/crd/*.yaml" }}
       {{- $file := printf (base ($path)) }}
      - name: {{ printf "%s" $file | replace "." "-" | trimSuffix "-" }}
        configMap:
          name: {{ printf "%s-%s-crd-%s" $release $name $file | trunc 63 |  trimSuffix "-" | trimSuffix "." }}
       {{- end -}}
