# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

timeout: 3600s # 1h
steps:

- id: Find affected solutions
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
  - -exc
  - |
      function watch_build() {
        local -r build_id="$1"
        local build_status=""

        while true; do
          build_status="$(gcloud builds list \
                            --filter="ID:${build_id}" \
                            --format="value(STATUS)")"

          case "${build_status}" in
            SUCCESS)
            break
            ;;
            WORKING|QUEUED)
            sleep 60
            ;;
            FAILURE|CANCELLED)
            gcloud builds log "${build_id}"
            exit 1
            ;;
            *)
            echo "Unrecognized status: ${build_status}"
            gcloud builds log "${build_id}"
            exit 1
            ;;
          esac
        done
      }

      # GCB clones the target branch as master
      # Compare local master (which is the target branch to remote master)
      git fetch origin master
      git diff --name-only "master" $(git merge-base "origin/master" "refs/remotes/origin/master") \
        | grep -P -o "^(\w+)\/(\w+)" \
        | uniq \
        | tee changes

      declare -A builds=()

      # Trigger all possible solution changes
      while IFS="/" read -r app_type solution; do
        solution_key="${app_type}/${solution}"

        if [[ "${app_type}" == "docker" ]]; then
          echo "Triggering build for ${solution_key}..."
          solution_build_id="$(gcloud builds submit . \
                                --substitutions "_SOLUTION_NAME=${solution}" \
                                --timeout 3600s \
                                --async \
                                --config cloudbuild-docker.yaml | awk '/QUEUED/ { print $1 }')"
          builds[solution_key]=solution_build_id
        else
          echo "Skipping: ${app_type}/${solution}."
        fi
      done < changes

      # Watch all created builds
      for solution in "${!builds[@]}"; do
        build_id="${builds[$solution]}"
        echo "Watching build ${build_id} for: ${solution}..."
        watch_build "${build_id}"
      done

      echo "All completed."

