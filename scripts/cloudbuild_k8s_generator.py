#!/usr/bin/env python
#
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import argparse
from jinja2 import Template

CLOUDBUILD_TEMPLATE = """
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

##################################################################################
## This file is generated by cloudbuild_k8s_generator.py. Do not manually edit. ##
##################################################################################

options:
  workerPool: $PROJECT_ID/gcb-workers-pool
steps:

- id: Pull Dev Image
  name: gcr.io/cloud-builders/docker
  dir: k8s
  entrypoint: bash
  args:
  - -exc
  - |
    TAG="$$(cat ./MARKETPLACE_TOOLS_TAG)"
    docker pull "gcr.io/cloud-marketplace-tools/k8s/dev:$$TAG"
    docker tag "gcr.io/cloud-marketplace-tools/k8s/dev:$$TAG" "gcr.io/cloud-marketplace-tools/k8s/dev:local"

- id: Get Kubernetes Credentials
  name: gcr.io/cloud-builders/gcloud
  waitFor:
  - '-'
  args:
  - container
  - clusters
  - get-credentials
  - '$_CLUSTER_NAME'
  - --region
  - '$_CLUSTER_LOCATION'
  - --project
  - '$PROJECT_ID'

- id: Copy kubectl Credentials
  name: gcr.io/google-appengine/debian9
  waitFor:
  - Get Kubernetes Credentials
  entrypoint: bash
  args:
  - -exc
  - |
    mkdir -p /workspace/.kube/
    cp -r $$HOME/.kube/ /workspace/

- id: Copy gcloud Credentials
  name: gcr.io/google-appengine/debian9
  waitFor:
  - Get Kubernetes Credentials
  entrypoint: bash
  args:
  - -exc
  - |
    mkdir -p /workspace/.config/gcloud/
    cp -r $$HOME/.config/gcloud/ /workspace/.config/

- id: Run diagnostic tool
  name: gcr.io/cloud-marketplace-tools/k8s/dev:local
  waitFor:
  - Copy kubectl Credentials
  - Copy gcloud Credentials
  - Pull Dev Image
  env:
  - 'KUBE_CONFIG=/workspace/.kube'
  - 'GCLOUD_CONFIG=/workspace/.config/gcloud'
  # Use local Docker network named cloudbuild as described here:
  # https://cloud.google.com/cloud-build/docs/overview#build_configuration_and_build_steps
  - 'EXTRA_DOCKER_PARAMS=--net cloudbuild'
  dir: k8s/{{ solution }}
  args:
  - make
  - app/doctor

- id: Build {{ solution }}
  name: gcr.io/cloud-marketplace-tools/k8s/dev:local
  waitFor:
  - Run diagnostic tool
  env:
  - 'KUBE_CONFIG=/workspace/.kube'
  - 'GCLOUD_CONFIG=/workspace/.config/gcloud'
  # Use local Docker network named cloudbuild as described here:
  # https://cloud.google.com/cloud-build/docs/overview#build_configuration_and_build_steps
  - 'EXTRA_DOCKER_PARAMS=--net cloudbuild'
  dir: k8s/{{ solution }}
  args:
  - make
  - -j4
  - app/build

- id: Verify {{ solution }}
  name: gcr.io/cloud-marketplace-tools/k8s/dev:local
  waitFor:
  - Build {{ solution }}
  env:
  - 'KUBE_CONFIG=/workspace/.kube'
  - 'GCLOUD_CONFIG=/workspace/.config/gcloud'
  # Use local Docker network named cloudbuild as described here:
  # https://cloud.google.com/cloud-build/docs/overview#build_configuration_and_build_steps
  - 'EXTRA_DOCKER_PARAMS=--net cloudbuild'
  dir: k8s/{{ solution }}
  args:
  - make
  - -j4
  - app/verify

{%- for extra_config in extra_configs %}

- id: Verify {{ solution }} ({{ extra_config['name'] }})
  name: gcr.io/cloud-marketplace-tools/k8s/dev:local
  waitFor:
  - Build {{ solution }}
  env:
  - 'KUBE_CONFIG=/workspace/.kube'
  - 'GCLOUD_CONFIG=/workspace/.config/gcloud'
  # Use local Docker network named cloudbuild as described here:
  # https://cloud.google.com/cloud-build/docs/overview#build_configuration_and_build_steps
  - 'EXTRA_DOCKER_PARAMS=--net cloudbuild'
  # Non-default variables.
  {%- for env_var in extra_config['env_vars'] %}
  - '{{ env_var }}'
  {%- endfor %}
  dir: k8s/{{ solution }}
  args:
  - make
  - -j4
  - app/verify

{%- endfor %}
""".strip()


class CloudBuildConfig():

  def __init__(self, solution):
    self._solution = solution

    self.extra_configs = []
    self.path = None
    self.template = CLOUDBUILD_TEMPLATE

  def exists(self):
    return os.path.isfile(self.path)

  def generate(self):
    return Template(self.template).render(
        solution=self._solution, extra_configs=self.extra_configs)

  def verify(self):
    if not self.exists():
      return False

    with open(self.path, 'r') as cloudbuild_file:
      return cloudbuild_file.read() == self.generate()

  def save(self):
    with open(self.path, 'w') as cloudbuild_file:
      cloudbuild_file.write(self.generate())

  def remove(self):
    return os.remove(self.path)


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument(
      '--solution',
      type=str,
      required=True,
      help='solution name')
  parser.add_argument(
      '--output',
      type=str,
      required=True,
      help='path to save configuration')
  parser.add_argument(
      '--verify_only',
      action='store_true',
      default=False,
      help='verify configuration')
  args = parser.parse_args()

  # Use extra_configs to run additional deployments
  # with non-default configurations.
  extra_configs = {
      'wordpress': [
          {
              'name': 'Public service and ingress',
              'env_vars': ['PUBLIC_SERVICE_AND_INGRESS_ENABLED=true']
          },
          {
              'name': 'Prometheus metrics',
              'env_vars': ['METRICS_EXPORTER_ENABLED=true']
          },
      ]
  }

  solution = args.solution
  path = args.output

  cloudbuild = CloudBuildConfig(solution=solution)
  cloudbuild.extra_configs = extra_configs.get(solution, [])
  cloudbuild.path = path

  if args.verify_only:
    if cloudbuild.verify():
      print('The %s file is up-to-date' % path)
      os.sys.exit(0)
    else:
      print('The %s file is not up-to-date. Please re-generate it' % path)
      os.sys.exit(1)
  else:
    cloudbuild.save()


if __name__ == '__main__':
  main()
