# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- $gosu := index .Packages "gosu" }}
{{- $golang := index .Packages "golang" }}
{{- $cassandra := index .Packages "cassandra" }}
{{- $c2dRelease := index .TemplateArgs "c2dRelease" }}

# MOSS compliant images use a hardcoded registry and pinned base images.
ARG BASE_REGISTRY="marketplace.gcr.io/google"
ARG BASE_IMAGE="debian12@sha256:f13f9826c524466f844e74534b8add32f51acd2be428b5dee782fe9086e59861"

# Stage 0: Airlock/Bootstrap
# This stage is for all external network operations, including fetching licenses,
# source code, and binaries from external sources.
FROM ${BASE_REGISTRY}/${BASE_IMAGE} AS bootstrap

RUN apt-get update && \
    apt-get install --no-install-recommends -y --allow-change-held-packages \
        gnupg curl ca-certificates apt-utils && \
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
    echo 'deb http://packages.cloud.google.com/apt apt-transport-artifact-registry-stable main' | tee -a /etc/apt/sources.list.d/artifact-registry.list

RUN apt-get update && apt-get install apt-transport-artifact-registry

# New clean base so we aren't fetching "gnupg curl apt-utils" if not needed
FROM marketplace.gcr.io/google/debian12@sha256:f13f9826c524466f844e74534b8add32f51acd2be428b5dee782fe9086e59861 as base

# ca-certificates is required for https
RUN apt-get update && \
    apt-get install --no-install-recommends -y --allow-change-held-packages \
        ca-certificates

# Copy only the AR transport binary from the bootstrap stage
COPY --from=bootstrap "/usr/lib/apt/methods/ar+https" "/usr/lib/apt/methods/ar+https"
# Copy the apache notice type license for OSPO
COPY --from=bootstrap "/usr/share/doc/apt-transport-artifact-registry" "/usr/share/doc/apt-transport-artifact-registry"

# Remove all other apt sources
RUN rm -f /etc/apt/sources.list.d/* /etc/apt/sources.list

# This ARG allows passing credentials path during the build
ARG GOOGLE_APPLICATION_CREDENTIALS

# Use a secret mount to securely add the Airlock apt repository and update
RUN --mount=type=secret,id=credentials \
    echo 'deb ar+https://us-apt.pkg.dev/remote/artifact-foundry-prod/debian-3p-remote-bookworm bookworm main' | \
    tee -a  /etc/apt/sources.list.d/artifact-registry.list && \
    apt-get update

# Stage 1: gosu-builder
# Build the gosu binary in a separate, clean stage.
FROM ${BASE_REGISTRY}/${BASE_IMAGE} AS gosu-builder

RUN --mount=type=secret,id=credentials \
    set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        arch-test \
        file \
        patch \
        git \
        golang; \
    rm -rf /var/lib/apt/lists/*

# Stage 2: Final Image
# This is the final, hardened image. No network access is allowed.
FROM ${BASE_REGISTRY}/${BASE_IMAGE}

# Explicitly set user/group IDs.
RUN groupadd -r cassandra --gid=999 && useradd -r -g cassandra --uid=999 cassandra;

# Install all runtime dependencies from a trusted repository.
RUN --mount=type=secret,id=credentials \
    set -ex; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        libjemalloc2 \
        procps \
        python3 \
        iproute2 \
        numactl \
        ca-certificates; \
    rm -rf /var/lib/apt/lists/*;

# Add gosu from gosu-build
RUN set -eux; \
    apt-get update && \
    apt-get install -y --no-install-recommends gosu && \
    rm -rf /var/lib/apt/lists/*

RUN gosu --version && gosu nobody true

ENV C2D_RELEASE {{ $c2dRelease }}

# Final setup and entrypoint.

COPY docker-entrypoint.sh /docker-entrypoint.sh;
VOLUME /var/lib/cassandra;

EXPOSE 7000 7001 7199 9042 9160 9404

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["cassandra", "-f"]